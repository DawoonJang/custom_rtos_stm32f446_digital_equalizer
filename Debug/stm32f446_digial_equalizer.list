
stm32f446_digial_equalizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002da0  08002da0  00003da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  00004018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002db8  08002db8  00003db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dc0  08002dc0  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc0  08002dc0  00003dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dc4  08002dc4  00003dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002dc8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002210  20000018  08002de0  00004018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002228  08002de0  00004228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bda  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d97  00000000  00000000  0000dc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0000f9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000614  00000000  00000000  000101c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002144b  00000000  00000000  000107dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abbd  00000000  00000000  00031c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8372  00000000  00000000  0003c7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104b56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f20  00000000  00000000  00104b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00106abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002d88 	.word	0x08002d88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	08002d88 	.word	0x08002d88

08000210 <PendSV_Handler>:
 8000210:	f3ef 8009 	mrs	r0, PSP
 8000214:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000218:	4b08      	ldr	r3, [pc, #32]	@ (800023c <PendSV_Handler+0x2c>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	6010      	str	r0, [r2, #0]
 800021e:	b508      	push	{r3, lr}
 8000220:	b672      	cpsid	i
 8000222:	f000 fd4d 	bl	8000cc0 <switching_task>
 8000226:	b662      	cpsie	i
 8000228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	6810      	ldr	r0, [r2, #0]
 8000230:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000234:	f380 8809 	msr	PSP, r0
 8000238:	4770      	bx	lr
 800023a:	0000      	.short	0x0000
 800023c:	200001e8 	.word	0x200001e8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <led_pin_init>:
#include "led.h"
#include "stm32f4xx_it.h"

void led_pin_init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

    HAL_GPIO_WritePin(GPIOB, PIN_LED1 | PIN_LED2 | PIN_LED3 | PIN_LED4, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000586:	4813      	ldr	r0, [pc, #76]	@ (80005d4 <led_pin_init+0x68>)
 8000588:	f001 fb0c 	bl	8001ba4 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LED1 | PIN_LED2 | PIN_LED3 | PIN_LED4;
 800058c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000590:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4619      	mov	r1, r3
 80005a2:	480c      	ldr	r0, [pc, #48]	@ (80005d4 <led_pin_init+0x68>)
 80005a4:	f001 f952 	bl	800184c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, PIN_LED5 | PIN_LED6 | PIN_LED7, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2107      	movs	r1, #7
 80005ac:	480a      	ldr	r0, [pc, #40]	@ (80005d8 <led_pin_init+0x6c>)
 80005ae:	f001 faf9 	bl	8001ba4 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LED5 | PIN_LED6 | PIN_LED7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <led_pin_init+0x6c>)
 80005c8:	f001 f940 	bl	800184c <HAL_GPIO_Init>
}
 80005cc:	bf00      	nop
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40020400 	.word	0x40020400
 80005d8:	40020800 	.word	0x40020800

080005dc <led_on>:

void led_on(unsigned int led)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	2310      	movs	r3, #16
 80005e6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f383 8811 	msr	BASEPRI, r3
}
 80005ee:	bf00      	nop
    disable_interrupts();

    if (led == NUM_LED5 || led == NUM_LED6 || led == NUM_LED7 || led == NUM_LED8)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d008      	beq.n	8000608 <led_on+0x2c>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d005      	beq.n	8000608 <led_on+0x2c>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d002      	beq.n	8000608 <led_on+0x2c>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d105      	bne.n	8000614 <led_on+0x38>
    {
        GPIOC->BSRR = (1 << led);
 8000608:	2201      	movs	r2, #1
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	409a      	lsls	r2, r3
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <led_on+0x5c>)
 8000610:	619a      	str	r2, [r3, #24]
 8000612:	e004      	b.n	800061e <led_on+0x42>
    }
    else
    {
        GPIOB->BSRR = (1 << led);
 8000614:	2201      	movs	r2, #1
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	409a      	lsls	r2, r3
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <led_on+0x60>)
 800061c:	619a      	str	r2, [r3, #24]
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	f383 8811 	msr	BASEPRI, r3
}
 8000628:	bf00      	nop
    }

    enable_interrupts();
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40020800 	.word	0x40020800
 800063c:	40020400 	.word	0x40020400

08000640 <led_off>:

void led_off(unsigned int led)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	2310      	movs	r3, #16
 800064a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f383 8811 	msr	BASEPRI, r3
}
 8000652:	bf00      	nop
    disable_interrupts();

    if (led == NUM_LED5 || led == NUM_LED6 || led == NUM_LED7 || led == NUM_LED8)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d008      	beq.n	800066c <led_off+0x2c>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d005      	beq.n	800066c <led_off+0x2c>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d002      	beq.n	800066c <led_off+0x2c>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d107      	bne.n	800067c <led_off+0x3c>
    {
        GPIOC->BSRR = (1 << led) << 16;
 800066c:	2201      	movs	r2, #1
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	4a0b      	ldr	r2, [pc, #44]	@ (80006a4 <led_off+0x64>)
 8000676:	041b      	lsls	r3, r3, #16
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	e006      	b.n	800068a <led_off+0x4a>
    }
    else
    {
        GPIOB->BSRR = (1 << led) << 16;
 800067c:	2201      	movs	r2, #1
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	fa02 f303 	lsl.w	r3, r2, r3
 8000684:	4a08      	ldr	r2, [pc, #32]	@ (80006a8 <led_off+0x68>)
 8000686:	041b      	lsls	r3, r3, #16
 8000688:	6193      	str	r3, [r2, #24]
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	f383 8811 	msr	BASEPRI, r3
}
 8000694:	bf00      	nop
    }

    enable_interrupts();
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020400 	.word	0x40020400

080006ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80006b0:	f000 ff48 	bl	8001544 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80006b4:	f000 f838 	bl	8000728 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80006b8:	f000 f8ce 	bl	8000858 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80006bc:	f000 f8a2 	bl	8000804 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */

    init_os();
 80006c0:	f000 fa90 	bl	8000be4 <init_os>

    task1_id = create_task(led1_task_func, nullptr, PRIO_HIGHEST + 1, 1024);
 80006c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c8:	2201      	movs	r2, #1
 80006ca:	2100      	movs	r1, #0
 80006cc:	4810      	ldr	r0, [pc, #64]	@ (8000710 <main+0x64>)
 80006ce:	f000 fb3b 	bl	8000d48 <create_task>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <main+0x68>)
 80006d8:	701a      	strb	r2, [r3, #0]
    task2_id = create_task(led2_task_func, nullptr, PRIO_HIGHEST + 1, 1024);
 80006da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006de:	2201      	movs	r2, #1
 80006e0:	2100      	movs	r1, #0
 80006e2:	480d      	ldr	r0, [pc, #52]	@ (8000718 <main+0x6c>)
 80006e4:	f000 fb30 	bl	8000d48 <create_task>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <main+0x70>)
 80006ee:	701a      	strb	r2, [r3, #0]
    task3_id = create_task(led3_task_func, nullptr, PRIO_HIGHEST, 1024);
 80006f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	4809      	ldr	r0, [pc, #36]	@ (8000720 <main+0x74>)
 80006fa:	f000 fb25 	bl	8000d48 <create_task>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <main+0x78>)
 8000704:	701a      	strb	r2, [r3, #0]

    start_os();
 8000706:	f000 faa9 	bl	8000c5c <start_os>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    while (1)
 800070a:	bf00      	nop
 800070c:	e7fd      	b.n	800070a <main+0x5e>
 800070e:	bf00      	nop
 8000710:	080013cd 	.word	0x080013cd
 8000714:	2000007c 	.word	0x2000007c
 8000718:	08001419 	.word	0x08001419
 800071c:	2000007d 	.word	0x2000007d
 8000720:	08001465 	.word	0x08001465
 8000724:	2000007e 	.word	0x2000007e

08000728 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	@ 0x50
 800072c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2234      	movs	r2, #52	@ 0x34
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fafa 	bl	8002d30 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <SystemClock_Config+0xd4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	4a29      	ldr	r2, [pc, #164]	@ (80007fc <SystemClock_Config+0xd4>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	@ 0x40
 800075c:	4b27      	ldr	r3, [pc, #156]	@ (80007fc <SystemClock_Config+0xd4>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <SystemClock_Config+0xd8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000774:	4a22      	ldr	r2, [pc, #136]	@ (8000800 <SystemClock_Config+0xd8>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <SystemClock_Config+0xd8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2310      	movs	r3, #16
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 800079c:	2310      	movs	r3, #16
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 80007a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007a4:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fd58 	bl	800226c <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x9e>
    {
        Error_Handler();
 80007c2:	f000 f8bb 	bl	800093c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007c6:	230f      	movs	r3, #15
 80007c8:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	2102      	movs	r1, #2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 f9f8 	bl	8001bd8 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xca>
    {
        Error_Handler();
 80007ee:	f000 f8a5 	bl	800093c <Error_Handler>
    }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	@ 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f001 ffb4 	bl	80027a8 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8000846:	f000 f879 	bl	800093c <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000034 	.word	0x20000034
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	@ 0x28
 800085c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b2f      	ldr	r3, [pc, #188]	@ (8000930 <MX_GPIO_Init+0xd8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a2e      	ldr	r2, [pc, #184]	@ (8000930 <MX_GPIO_Init+0xd8>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b2c      	ldr	r3, [pc, #176]	@ (8000930 <MX_GPIO_Init+0xd8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <MX_GPIO_Init+0xd8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a27      	ldr	r2, [pc, #156]	@ (8000930 <MX_GPIO_Init+0xd8>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b25      	ldr	r3, [pc, #148]	@ (8000930 <MX_GPIO_Init+0xd8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <MX_GPIO_Init+0xd8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a20      	ldr	r2, [pc, #128]	@ (8000930 <MX_GPIO_Init+0xd8>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <MX_GPIO_Init+0xd8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_GPIO_Init+0xd8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a19      	ldr	r2, [pc, #100]	@ (8000930 <MX_GPIO_Init+0xd8>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_GPIO_Init+0xd8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2120      	movs	r1, #32
 80008e2:	4814      	ldr	r0, [pc, #80]	@ (8000934 <MX_GPIO_Init+0xdc>)
 80008e4:	f001 f95e 	bl	8001ba4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 80008e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	480e      	ldr	r0, [pc, #56]	@ (8000938 <MX_GPIO_Init+0xe0>)
 8000900:	f000 ffa4 	bl	800184c <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8000904:	2320      	movs	r3, #32
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	@ (8000934 <MX_GPIO_Init+0xdc>)
 800091c:	f000 ff96 	bl	800184c <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    led_pin_init();
 8000920:	f7ff fe24 	bl	800056c <led_pin_init>
    switch_pin_init();
 8000924:	f000 fcd0 	bl	80012c8 <switch_pin_init>
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	@ 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000
 8000938:	40020800 	.word	0x40020800

0800093c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	@ (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	@ (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <s_insert_ready_task>:
static void s_insert_free_task(uint8_t task_id);
static void s_insert_delay_task(uint8_t task_id);
static void s_delete_delay_task(uint8_t task_id);

static void s_insert_ready_task(const uint8_t task_id)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
    ST_Task *ptask = &task_pool[task_id];
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	4613      	mov	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4413      	add	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <s_insert_ready_task+0x74>)
 80009b2:	4413      	add	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
    ST_Task **head = &ready_task_pool[ptask->prio].head;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4a15      	ldr	r2, [pc, #84]	@ (8000a14 <s_insert_ready_task+0x78>)
 80009be:	4413      	add	r3, r2
 80009c0:	60bb      	str	r3, [r7, #8]

    if (*head == NULL)
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d109      	bne.n	80009de <s_insert_ready_task+0x42>
    {
        *head = ptask;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	601a      	str	r2, [r3, #0]
        ptask->next = ptask;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	619a      	str	r2, [r3, #24]
        ptask->prev = ptask;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	61da      	str	r2, [r3, #28]
        ptask->next = *head;

        (*head)->prev->next = ptask;
        (*head)->prev = ptask;
    }
}
 80009dc:	e011      	b.n	8000a02 <s_insert_ready_task+0x66>
        ptask->prev = (*head)->prev;
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	69da      	ldr	r2, [r3, #28]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	61da      	str	r2, [r3, #28]
        ptask->next = *head;
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	619a      	str	r2, [r3, #24]
        (*head)->prev->next = ptask;
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	619a      	str	r2, [r3, #24]
        (*head)->prev = ptask;
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	61da      	str	r2, [r3, #28]
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000080 	.word	0x20000080
 8000a14:	200001ec 	.word	0x200001ec

08000a18 <s_delete_ready_task>:

static void s_delete_ready_task(const uint8_t task_id)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
    ST_Task *ptask = &task_pool[task_id];
 8000a22:	79fa      	ldrb	r2, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	4413      	add	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000a98 <s_delete_ready_task+0x80>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
    ST_Task **head = &ready_task_pool[ptask->prio].head;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4a18      	ldr	r2, [pc, #96]	@ (8000a9c <s_delete_ready_task+0x84>)
 8000a3a:	4413      	add	r3, r2
 8000a3c:	60bb      	str	r3, [r7, #8]

    if (*head == nullptr)
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d021      	beq.n	8000a8a <s_delete_ready_task+0x72>
        return;

    ptask->prev->next = ptask->next;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	6992      	ldr	r2, [r2, #24]
 8000a4e:	619a      	str	r2, [r3, #24]
    ptask->next->prev = ptask->prev;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	69d2      	ldr	r2, [r2, #28]
 8000a58:	61da      	str	r2, [r3, #28]

    if (*head == ptask)
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d10a      	bne.n	8000a7a <s_delete_ready_task+0x62>
    {
        *head = (ptask->next == ptask) ? nullptr : ptask->next;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d002      	beq.n	8000a74 <s_delete_ready_task+0x5c>
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	e000      	b.n	8000a76 <s_delete_ready_task+0x5e>
 8000a74:	2300      	movs	r3, #0
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	6013      	str	r3, [r2, #0]
    }

    ptask->prev = ptask->next = nullptr;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	699a      	ldr	r2, [r3, #24]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	61da      	str	r2, [r3, #28]
 8000a88:	e000      	b.n	8000a8c <s_delete_ready_task+0x74>
        return;
 8000a8a:	bf00      	nop
}
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000080 	.word	0x20000080
 8000a9c:	200001ec 	.word	0x200001ec

08000aa0 <s_insert_free_task>:

static void s_insert_free_task(const uint8_t task_id)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
    ST_Task *ptask = &task_pool[task_id];
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	4613      	mov	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	4413      	add	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4a07      	ldr	r2, [pc, #28]	@ (8000ad4 <s_insert_free_task+0x34>)
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
    ptask->next = free_task_pool.head;
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <s_insert_free_task+0x38>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	619a      	str	r2, [r3, #24]
    free_task_pool.head = ptask;
 8000ac2:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <s_insert_free_task+0x38>)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	20000080 	.word	0x20000080
 8000ad8:	20000218 	.word	0x20000218

08000adc <s_insert_delay_task>:

static void s_insert_delay_task(const uint8_t task_id)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
    ST_Task *ptask = &task_pool[task_id];
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	4413      	add	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <s_insert_delay_task+0x60>)
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]

    if (delay_task_pool.head == nullptr)
 8000af6:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <s_insert_delay_task+0x64>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10a      	bne.n	8000b14 <s_insert_delay_task+0x38>
    {
        delay_task_pool.head = ptask;
 8000afe:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <s_insert_delay_task+0x64>)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	6013      	str	r3, [r2, #0]
        ptask->prev = ptask->next = nullptr;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	699a      	ldr	r2, [r3, #24]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61da      	str	r2, [r3, #28]
        return;
 8000b12:	e00d      	b.n	8000b30 <s_insert_delay_task+0x54>
    }

    ptask->prev = nullptr;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
    ptask->next = delay_task_pool.head;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <s_insert_delay_task+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	619a      	str	r2, [r3, #24]

    delay_task_pool.head = ptask;
 8000b22:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <s_insert_delay_task+0x64>)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	6013      	str	r3, [r2, #0]
    ptask->next->prev = ptask;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	61da      	str	r2, [r3, #28]
}
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000080 	.word	0x20000080
 8000b40:	2000021c 	.word	0x2000021c

08000b44 <s_delete_delay_task>:

static void s_delete_delay_task(const uint8_t task_id)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
    ST_Task *ptask = &task_pool[task_id];
 8000b4e:	79fa      	ldrb	r2, [r7, #7]
 8000b50:	4613      	mov	r3, r2
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	4413      	add	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4a0f      	ldr	r2, [pc, #60]	@ (8000b98 <s_delete_delay_task+0x54>)
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]

    if (ptask->prev != nullptr)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d005      	beq.n	8000b72 <s_delete_delay_task+0x2e>
    {
        ptask->prev->next = ptask->next;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	6992      	ldr	r2, [r2, #24]
 8000b6e:	619a      	str	r2, [r3, #24]
 8000b70:	e003      	b.n	8000b7a <s_delete_delay_task+0x36>
    }
    else
    {
        delay_task_pool.head = ptask->next;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a09      	ldr	r2, [pc, #36]	@ (8000b9c <s_delete_delay_task+0x58>)
 8000b78:	6013      	str	r3, [r2, #0]
    }

    if (ptask->next != nullptr)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d004      	beq.n	8000b8c <s_delete_delay_task+0x48>
    {
        ptask->next->prev = ptask->prev;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	69d2      	ldr	r2, [r2, #28]
 8000b8a:	61da      	str	r2, [r3, #28]
    }
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	20000080 	.word	0x20000080
 8000b9c:	2000021c 	.word	0x2000021c

08000ba0 <init_irq>:

void init_irq(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
    SCB->SHP[(uint8_t)SVCall_IRQn - 4] = 0xF << 4;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <init_irq+0x40>)
 8000ba8:	22f0      	movs	r2, #240	@ 0xf0
 8000baa:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
    SCB->SHP[(uint8_t)PendSV_IRQn - 4] = 0xF << 4;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <init_irq+0x40>)
 8000bb0:	22f0      	movs	r2, #240	@ 0xf0
 8000bb2:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112

    // Set IRQ priority
    for (uint32_t i = 0; i < NUM_IRQS; ++i)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	e008      	b.n	8000bce <init_irq+0x2e>
    {
        NVIC_SetPriority((IRQn_Type)i, IRQ_PRIORITY);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	210e      	movs	r1, #14
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fec0 	bl	8000948 <__NVIC_SetPriority>
    for (uint32_t i = 0; i < NUM_IRQS; ++i)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bd2:	d9f3      	bls.n	8000bbc <init_irq+0x1c>
    }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <init_os>:

void init_os(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
    free_task_pool.head = nullptr;
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <init_os+0x68>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
    delay_task_pool.head = nullptr;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <init_os+0x6c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < MAX_TASK; i++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	e019      	b.n	8000c30 <init_os+0x4c>
    {
        task_pool[i].task_id = i;
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	4815      	ldr	r0, [pc, #84]	@ (8000c54 <init_os+0x70>)
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4403      	add	r3, r0
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	6019      	str	r1, [r3, #0]
        s_insert_free_task(task_pool[i].task_id);
 8000c10:	4910      	ldr	r1, [pc, #64]	@ (8000c54 <init_os+0x70>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	4413      	add	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	3304      	adds	r3, #4
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff3b 	bl	8000aa0 <s_insert_free_task>
    for (int i = 0; i < MAX_TASK; i++)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b09      	cmp	r3, #9
 8000c34:	dde2      	ble.n	8000bfc <init_os+0x18>
    }

    create_task(idle_task_func, nullptr, PRIO_LOWEST, 128);
 8000c36:	2380      	movs	r3, #128	@ 0x80
 8000c38:	220a      	movs	r2, #10
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4806      	ldr	r0, [pc, #24]	@ (8000c58 <init_os+0x74>)
 8000c3e:	f000 f883 	bl	8000d48 <create_task>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000218 	.word	0x20000218
 8000c50:	2000021c 	.word	0x2000021c
 8000c54:	20000080 	.word	0x20000080
 8000c58:	080013c1 	.word	0x080013c1

08000c5c <start_os>:

void start_os(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    switching_task();
 8000c60:	f000 f82e 	bl	8000cc0 <switching_task>
    init_irq();
 8000c64:	f7ff ff9c 	bl	8000ba0 <init_irq>

    __asm__ volatile("svc #0");
 8000c68:	df00      	svc	0
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <s_allocate_stack>:

static uint8_t *s_allocate_stack(uint16_t stack_size)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
    stack_size = (stack_size + 7) & ~0x7;
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	3307      	adds	r3, #7
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	f023 0307 	bic.w	r3, r3, #7
 8000c84:	80fb      	strh	r3, [r7, #6]

    uint8_t *new_stack = os_stack_ptr - stack_size;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <s_allocate_stack+0x48>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]

    if (new_stack < os_stack_limit)
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <s_allocate_stack+0x4c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d201      	bcs.n	8000ca0 <s_allocate_stack+0x30>
    {
        return nullptr;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e004      	b.n	8000caa <s_allocate_stack+0x3a>
    }

    os_stack_ptr = new_stack;
 8000ca0:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <s_allocate_stack+0x48>)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6013      	str	r3, [r2, #0]
    return os_stack_ptr;
 8000ca6:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <s_allocate_stack+0x48>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <switching_task>:

    return ret;
}

void switching_task(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
    for (int prio = PRIO_HIGHEST; prio <= PRIO_LOWEST; prio++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	e00f      	b.n	8000cec <switching_task+0x2c>
    {
        if (ready_task_pool[prio].head != nullptr)
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cfc <switching_task+0x3c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d006      	beq.n	8000ce6 <switching_task+0x26>
        {
            current_task_ptr = ready_task_pool[prio].head;
 8000cd8:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <switching_task+0x3c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <switching_task+0x40>)
 8000ce2:	6013      	str	r3, [r2, #0]
            return;
 8000ce4:	e005      	b.n	8000cf2 <switching_task+0x32>
    for (int prio = PRIO_HIGHEST; prio <= PRIO_LOWEST; prio++)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b0a      	cmp	r3, #10
 8000cf0:	ddec      	ble.n	8000ccc <switching_task+0xc>
        }
    }
}
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	200001ec 	.word	0x200001ec
 8000d00:	200001e8 	.word	0x200001e8

08000d04 <get_free_task>:

ST_Task *get_free_task(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
    if (free_task_pool.head == nullptr)
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <get_free_task+0x40>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <get_free_task+0x12>
    {
        return nullptr;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e00f      	b.n	8000d36 <get_free_task+0x32>
    }

    ST_Task *task = free_task_pool.head;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <get_free_task+0x40>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	607b      	str	r3, [r7, #4]
    free_task_pool.head = task->next;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a08      	ldr	r2, [pc, #32]	@ (8000d44 <get_free_task+0x40>)
 8000d22:	6013      	str	r3, [r2, #0]

    if (free_task_pool.head != nullptr)
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <get_free_task+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <get_free_task+0x30>
    {
        free_task_pool.head->prev = nullptr;
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <get_free_task+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
    }

    return task;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000218 	.word	0x20000218

08000d48 <create_task>:

uint8_t create_task(void (*ptask_func)(void *), void *const para, const int16_t prio, const uint16_t stack_size)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	@ 0x30
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	4611      	mov	r1, r2
 8000d54:	461a      	mov	r2, r3
 8000d56:	460b      	mov	r3, r1
 8000d58:	80fb      	strh	r3, [r7, #6]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	80bb      	strh	r3, [r7, #4]
 8000d5e:	2310      	movs	r3, #16
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d64:	f383 8811 	msr	BASEPRI, r3
}
 8000d68:	bf00      	nop
    disable_interrupts();

    if (prio < PRIO_HIGHEST || prio > PRIO_LOWEST)
 8000d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db03      	blt.n	8000d7a <create_task+0x32>
 8000d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	dd07      	ble.n	8000d8a <create_task+0x42>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	f383 8811 	msr	BASEPRI, r3
}
 8000d84:	bf00      	nop
    {
        enable_interrupts();
        return -1; // Invalid priority
 8000d86:	23ff      	movs	r3, #255	@ 0xff
 8000d88:	e06c      	b.n	8000e64 <create_task+0x11c>
    }

    if (stack_size <= 0)
 8000d8a:	88bb      	ldrh	r3, [r7, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d107      	bne.n	8000da0 <create_task+0x58>
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	f383 8811 	msr	BASEPRI, r3
}
 8000d9a:	bf00      	nop
    {
        enable_interrupts();
        return -1; // Invalid stack size
 8000d9c:	23ff      	movs	r3, #255	@ 0xff
 8000d9e:	e061      	b.n	8000e64 <create_task+0x11c>
    }

    ST_Task *free_task_ptr = get_free_task();
 8000da0:	f7ff ffb0 	bl	8000d04 <get_free_task>
 8000da4:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (free_task_ptr == nullptr)
 8000da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d107      	bne.n	8000dbc <create_task+0x74>
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f383 8811 	msr	BASEPRI, r3
}
 8000db6:	bf00      	nop
    {
        enable_interrupts();
        return -1; // No free task available
 8000db8:	23ff      	movs	r3, #255	@ 0xff
 8000dba:	e053      	b.n	8000e64 <create_task+0x11c>
    }

    free_task_ptr->top_of_stack = (unsigned long *)s_allocate_stack(stack_size);
 8000dbc:	88bb      	ldrh	r3, [r7, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff56 	bl	8000c70 <s_allocate_stack>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc8:	601a      	str	r2, [r3, #0]

    if (free_task_ptr->top_of_stack == nullptr)
 8000dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10d      	bne.n	8000dee <create_task+0xa6>
    {
        s_insert_free_task(free_task_ptr->task_id);
 8000dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe61 	bl	8000aa0 <s_insert_free_task>
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	f383 8811 	msr	BASEPRI, r3
}
 8000de8:	bf00      	nop
        enable_interrupts();
        return -1; // Stack allocation failed
 8000dea:	23ff      	movs	r3, #255	@ 0xff
 8000dec:	e03a      	b.n	8000e64 <create_task+0x11c>
    }

    free_task_ptr->prio = free_task_ptr->origin_prio = prio;
 8000dee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfc:	609a      	str	r2, [r3, #8]
    free_task_ptr->state = STATE_READY;
 8000dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2020 	strb.w	r2, [r3, #32]
    free_task_ptr->blocked_reason = BLOCKED_NONE;
 8000e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    free_task_ptr->top_of_stack -= 16;
 8000e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f1a3 0240 	sub.w	r2, r3, #64	@ 0x40
 8000e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e18:	601a      	str	r2, [r3, #0]
    free_task_ptr->top_of_stack[1] = DEBUG_DUMMY_R1;
 8000e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8000e24:	601a      	str	r2, [r3, #0]
    free_task_ptr->top_of_stack[8] = (unsigned long)para;
 8000e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3320      	adds	r3, #32
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	601a      	str	r2, [r3, #0]
    free_task_ptr->top_of_stack[14] = (unsigned long)ptask_func;
 8000e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3338      	adds	r3, #56	@ 0x38
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	601a      	str	r2, [r3, #0]
    free_task_ptr->top_of_stack[15] = INIT_PROCESSOR_STATE_REGISTER;
 8000e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	333c      	adds	r3, #60	@ 0x3c
 8000e40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e44:	601a      	str	r2, [r3, #0]
    s_insert_ready_task(free_task_ptr->task_id);
 8000e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fda5 	bl	800099c <s_insert_ready_task>
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f383 8811 	msr	BASEPRI, r3
}
 8000e5c:	bf00      	nop

    enable_interrupts();
    return free_task_ptr->task_id;
 8000e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	b2db      	uxtb	r3, r3
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3730      	adds	r7, #48	@ 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <update_delayed_tasks>:

void update_delayed_tasks(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	2310      	movs	r3, #16
 8000e74:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	f383 8811 	msr	BASEPRI, r3
}
 8000e7c:	bf00      	nop
    disable_interrupts();

    const uint32_t cur_tick = HAL_GetTick();
 8000e7e:	f000 fbc7 	bl	8001610 <HAL_GetTick>
 8000e82:	6138      	str	r0, [r7, #16]

    ST_Task *cur_task = delay_task_pool.head;
 8000e84:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <update_delayed_tasks+0x7c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	617b      	str	r3, [r7, #20]
    ST_Task *next_task = cur_task->next;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	60fb      	str	r3, [r7, #12]

    while (cur_task != nullptr)
 8000e90:	e01d      	b.n	8000ece <update_delayed_tasks+0x62>
    {
        next_task = cur_task->next;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	60fb      	str	r3, [r7, #12]

        if (cur_task->task_timeout <= cur_tick)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d313      	bcc.n	8000eca <update_delayed_tasks+0x5e>
        {
            cur_task->state = STATE_READY;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2020 	strb.w	r2, [r3, #32]
            cur_task->blocked_reason = BLOCKED_NONE;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            s_delete_delay_task(cur_task->task_id);
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fe43 	bl	8000b44 <s_delete_delay_task>
            s_insert_ready_task(cur_task->task_id);
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fd69 	bl	800099c <s_insert_ready_task>
        }

        cur_task = next_task;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	617b      	str	r3, [r7, #20]
    while (cur_task != nullptr)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1de      	bne.n	8000e92 <update_delayed_tasks+0x26>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f383 8811 	msr	BASEPRI, r3
}
 8000ede:	bf00      	nop
    }

    enable_interrupts();
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000021c 	.word	0x2000021c

08000eec <delay_task>:

void delay_task(const uint32_t timeout)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	f383 8811 	msr	BASEPRI, r3
}
 8000efe:	bf00      	nop
    disable_interrupts();

    current_task_ptr->state = STATE_BLOCKED;
 8000f00:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <delay_task+0x74>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2202      	movs	r2, #2
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
    current_task_ptr->blocked_reason = BLOCKED_SLEEP;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <delay_task+0x74>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    current_task_ptr->task_timeout = HAL_GetTick() + timeout;
 8000f14:	f000 fb7c 	bl	8001610 <HAL_GetTick>
 8000f18:	4601      	mov	r1, r0
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <delay_task+0x74>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	440a      	add	r2, r1
 8000f22:	611a      	str	r2, [r3, #16]

    s_delete_ready_task(current_task_ptr->task_id);
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <delay_task+0x74>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fd73 	bl	8000a18 <s_delete_ready_task>
    s_insert_delay_task(current_task_ptr->task_id);
 8000f32:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <delay_task+0x74>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fdce 	bl	8000adc <s_insert_delay_task>

    trigger_context_switch();
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <delay_task+0x78>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <delay_task+0x78>)
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4a:	6053      	str	r3, [r2, #4]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f383 8811 	msr	BASEPRI, r3
}
 8000f56:	bf00      	nop

    enable_interrupts();
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200001e8 	.word	0x200001e8
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <blocked_cur_task>:

void blocked_cur_task(const E_TaskBlockedReason blocked_reason, const uint32_t timeout)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
    current_task_ptr->state = STATE_BLOCKED;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <blocked_cur_task+0x54>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2202      	movs	r2, #2
 8000f7a:	f883 2020 	strb.w	r2, [r3, #32]
    current_task_ptr->blocked_reason = blocked_reason;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <blocked_cur_task+0x54>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	79fa      	ldrb	r2, [r7, #7]
 8000f84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    current_task_ptr->task_timeout = HAL_GetTick() + timeout;
 8000f88:	f000 fb42 	bl	8001610 <HAL_GetTick>
 8000f8c:	4601      	mov	r1, r0
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <blocked_cur_task+0x54>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	440a      	add	r2, r1
 8000f96:	611a      	str	r2, [r3, #16]

    s_delete_ready_task(current_task_ptr->task_id);
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <blocked_cur_task+0x54>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fd39 	bl	8000a18 <s_delete_ready_task>
    s_insert_delay_task(current_task_ptr->task_id);
 8000fa6:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <blocked_cur_task+0x54>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fd94 	bl	8000adc <s_insert_delay_task>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200001e8 	.word	0x200001e8

08000fc0 <wait_signal>:

uint8_t wait_signal(uint32_t *const pdata, const uint32_t timeout)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	2310      	movs	r3, #16
 8000fcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f383 8811 	msr	BASEPRI, r3
}
 8000fd4:	bf00      	nop
    disable_interrupts();
    blocked_cur_task(BLOCKED_WAIT_SIGNAL, timeout);
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f7ff ffc5 	bl	8000f68 <blocked_cur_task>
    trigger_context_switch();
 8000fde:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <wait_signal+0x70>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4a13      	ldr	r2, [pc, #76]	@ (8001030 <wait_signal+0x70>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe8:	6053      	str	r3, [r2, #4]
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	f383 8811 	msr	BASEPRI, r3
}
 8000ff4:	bf00      	nop
    enable_interrupts();

    E_TaskBlockedReason initial_blocked_reason = current_task_ptr->blocked_reason;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <wait_signal+0x74>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ffe:	75fb      	strb	r3, [r7, #23]
    current_task_ptr->blocked_reason = BLOCKED_NONE;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <wait_signal+0x74>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    *pdata = current_task_ptr->received_signal;
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <wait_signal+0x74>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	695a      	ldr	r2, [r3, #20]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	601a      	str	r2, [r3, #0]

    return (initial_blocked_reason == current_task_ptr->blocked_reason);
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <wait_signal+0x74>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800101c:	7dfa      	ldrb	r2, [r7, #23]
 800101e:	429a      	cmp	r2, r3
 8001020:	bf0c      	ite	eq
 8001022:	2301      	moveq	r3, #1
 8001024:	2300      	movne	r3, #0
 8001026:	b2db      	uxtb	r3, r3
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	200001e8 	.word	0x200001e8

08001038 <send_signal>:

void send_signal(const uint8_t dest_task_id, const uint32_t signal)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	2310      	movs	r3, #16
 8001046:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	f383 8811 	msr	BASEPRI, r3
}
 800104e:	bf00      	nop
    disable_interrupts();

    ST_Task *pdest_task = &task_pool[dest_task_id];
 8001050:	79fa      	ldrb	r2, [r7, #7]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4a18      	ldr	r2, [pc, #96]	@ (80010bc <send_signal+0x84>)
 800105c:	4413      	add	r3, r2
 800105e:	617b      	str	r3, [r7, #20]

    if (pdest_task->state == STATE_BLOCKED && pdest_task->blocked_reason == BLOCKED_WAIT_SIGNAL)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d11d      	bne.n	80010a6 <send_signal+0x6e>
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001070:	2b02      	cmp	r3, #2
 8001072:	d118      	bne.n	80010a6 <send_signal+0x6e>
    {
        pdest_task->received_signal = signal;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	615a      	str	r2, [r3, #20]
        pdest_task->state = STATE_READY;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2020 	strb.w	r2, [r3, #32]
        pdest_task->blocked_reason = BLOCKED_NONE;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        s_delete_delay_task(dest_task_id);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fd59 	bl	8000b44 <s_delete_delay_task>
        s_insert_ready_task(dest_task_id);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fc81 	bl	800099c <s_insert_ready_task>

        trigger_context_switch();
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <send_signal+0x88>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <send_signal+0x88>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	6053      	str	r3, [r2, #4]
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f383 8811 	msr	BASEPRI, r3
}
 80010b0:	bf00      	nop
    }

    enable_interrupts();
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000080 	.word	0x20000080
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <HAL_MspInit+0x4c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001110 <HAL_MspInit+0x4c>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <HAL_MspInit+0x4c>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001102:	2007      	movs	r0, #7
 8001104:	f000 fb60 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <HAL_UART_MspInit+0x84>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12b      	bne.n	800118e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b18      	ldr	r3, [pc, #96]	@ (800119c <HAL_UART_MspInit+0x88>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	4a17      	ldr	r2, [pc, #92]	@ (800119c <HAL_UART_MspInit+0x88>)
 8001140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001144:	6413      	str	r3, [r2, #64]	@ 0x40
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <HAL_UART_MspInit+0x88>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_UART_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a10      	ldr	r2, [pc, #64]	@ (800119c <HAL_UART_MspInit+0x88>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <HAL_UART_MspInit+0x88>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800116e:	230c      	movs	r3, #12
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117e:	2307      	movs	r3, #7
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <HAL_UART_MspInit+0x8c>)
 800118a:	f000 fb5f 	bl	800184c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40004400 	.word	0x40004400
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <NMI_Handler+0x4>

080011ac <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <MemManage_Handler+0x4>

080011bc <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <UsageFault_Handler+0x4>

080011cc <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
__WEAK void SVC_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
    __asm volatile("cpsid i\n"
 80011d0:	b672      	cpsid	i
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <SVC_Handler+0x28>)
 80011d4:	6819      	ldr	r1, [r3, #0]
 80011d6:	6808      	ldr	r0, [r1, #0]
 80011d8:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80011dc:	f380 8809 	msr	PSP, r0
 80011e0:	f04e 0e0d 	orr.w	lr, lr, #13
 80011e4:	b662      	cpsie	i
 80011e6:	4770      	bx	lr
                   "ldmia r0!, {r4-r11}\n"
                   "msr psp, r0\n"
                   "orr lr, #0xd\n" // Thread 모드에서 복귀
                   "cpsie i\n"      // 인터럽트 활성화
                   "bx lr\n");
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	0000      	.short	0x0000
 80011f4:	200001e8 	.word	0x200001e8

080011f8 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	2310      	movs	r3, #16
 8001210:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	f383 8811 	msr	BASEPRI, r3
}
 8001218:	bf00      	nop
    /* USER CODE BEGIN SysTick_IRQn 0 */
    disable_interrupts();

    HAL_IncTick();
 800121a:	f000 f9e5 	bl	80015e8 <HAL_IncTick>
    update_delayed_tasks();
 800121e:	f7ff fe25 	bl	8000e6c <update_delayed_tasks>

    trigger_context_switch();
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <SysTick_Handler+0x3c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4a07      	ldr	r2, [pc, #28]	@ (8001244 <SysTick_Handler+0x3c>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800122c:	6053      	str	r3, [r2, #4]
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f383 8811 	msr	BASEPRI, r3
}
 8001238:	bf00      	nop

    /* USER CODE END SysTick_IRQn 0 */

    /* USER CODE BEGIN SysTick_IRQn 1 */
    /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <EXTI2_IRQHandler>:
#include "os.h"

extern uint8_t task3_id;

void EXTI2_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_2) != RESET)
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <EXTI2_IRQHandler+0x34>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00f      	beq.n	8001278 <EXTI2_IRQHandler+0x30>
    {
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <EXTI2_IRQHandler+0x34>)
 800125a:	2204      	movs	r2, #4
 800125c:	615a      	str	r2, [r3, #20]

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_SET)
 800125e:	2104      	movs	r1, #4
 8001260:	4807      	ldr	r0, [pc, #28]	@ (8001280 <EXTI2_IRQHandler+0x38>)
 8001262:	f000 fc87 	bl	8001b74 <HAL_GPIO_ReadPin>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d105      	bne.n	8001278 <EXTI2_IRQHandler+0x30>
        {
            send_signal(task3_id, 1);
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <EXTI2_IRQHandler+0x3c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2101      	movs	r1, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fee0 	bl	8001038 <send_signal>
        }
    }
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40013c00 	.word	0x40013c00
 8001280:	40020c00 	.word	0x40020c00
 8001284:	2000007e 	.word	0x2000007e

08001288 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <EXTI4_IRQHandler+0x34>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00f      	beq.n	80012b8 <EXTI4_IRQHandler+0x30>
    {
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <EXTI4_IRQHandler+0x34>)
 800129a:	2210      	movs	r2, #16
 800129c:	615a      	str	r2, [r3, #20]

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
 800129e:	2110      	movs	r1, #16
 80012a0:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <EXTI4_IRQHandler+0x38>)
 80012a2:	f000 fc67 	bl	8001b74 <HAL_GPIO_ReadPin>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d105      	bne.n	80012b8 <EXTI4_IRQHandler+0x30>
        {
            send_signal(task3_id, 2);
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <EXTI4_IRQHandler+0x3c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2102      	movs	r1, #2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fec0 	bl	8001038 <send_signal>
        }
    }
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40013c00 	.word	0x40013c00
 80012c0:	40020000 	.word	0x40020000
 80012c4:	2000007e 	.word	0x2000007e

080012c8 <switch_pin_init>:

void switch_pin_init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

    // Enable clock for GPIOD and GPIOA
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <switch_pin_init+0xc8>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001390 <switch_pin_init+0xc8>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <switch_pin_init+0xc8>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <switch_pin_init+0xc8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a23      	ldr	r2, [pc, #140]	@ (8001390 <switch_pin_init+0xc8>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <switch_pin_init+0xc8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <switch_pin_init+0xc8>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <switch_pin_init+0xc8>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001324:	6453      	str	r3, [r2, #68]	@ 0x44
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <switch_pin_init+0xc8>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

    // SW1 (PD2)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001332:	2304      	movs	r3, #4
 8001334:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001336:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800133a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800133c:	2302      	movs	r3, #2
 800133e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	4619      	mov	r1, r3
 8001346:	4813      	ldr	r0, [pc, #76]	@ (8001394 <switch_pin_init+0xcc>)
 8001348:	f000 fa80 	bl	800184c <HAL_GPIO_Init>

    // SW2 (PA4)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800134c:	2310      	movs	r3, #16
 800134e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001350:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001354:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001356:	2302      	movs	r3, #2
 8001358:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	4619      	mov	r1, r3
 8001360:	480d      	ldr	r0, [pc, #52]	@ (8001398 <switch_pin_init+0xd0>)
 8001362:	f000 fa73 	bl	800184c <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2105      	movs	r1, #5
 800136a:	2008      	movs	r0, #8
 800136c:	f000 fa37 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001370:	2008      	movs	r0, #8
 8001372:	f000 fa50 	bl	8001816 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2105      	movs	r1, #5
 800137a:	200a      	movs	r0, #10
 800137c:	f000 fa2f 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001380:	200a      	movs	r0, #10
 8001382:	f000 fa48 	bl	8001816 <HAL_NVIC_EnableIRQ>
 8001386:	bf00      	nop
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40020000 	.word	0x40020000

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <SystemInit+0x20>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a6:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <SystemInit+0x20>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <idle_task_func>:
#include "task.h"
#include "os.h"
#include "stm32f4xx_it.h"

void idle_task_func(void *param)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
    while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <idle_task_func+0x8>

080013cc <led1_task_func>:
        ;
    }
}

void led1_task_func(void *param)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
    static uint8_t flag = 1;

    while (1)
    {
        if (flag)
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <led1_task_func+0x48>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <led1_task_func+0x1e>
        {
            led_on(NUM_LED3);
 80013dc:	200e      	movs	r0, #14
 80013de:	f7ff f8fd 	bl	80005dc <led_on>
            led_on(NUM_LED4);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f7ff f8fa 	bl	80005dc <led_on>
 80013e8:	e005      	b.n	80013f6 <led1_task_func+0x2a>
        }
        else
        {
            led_off(NUM_LED3);
 80013ea:	200e      	movs	r0, #14
 80013ec:	f7ff f928 	bl	8000640 <led_off>
            led_off(NUM_LED4);
 80013f0:	200f      	movs	r0, #15
 80013f2:	f7ff f925 	bl	8000640 <led_off>
        }

        flag = !flag;
 80013f6:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <led1_task_func+0x48>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	bf0c      	ite	eq
 80013fe:	2301      	moveq	r3, #1
 8001400:	2300      	movne	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <led1_task_func+0x48>)
 8001408:	701a      	strb	r2, [r3, #0]
        delay_task(1000);
 800140a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800140e:	f7ff fd6d 	bl	8000eec <delay_task>
        if (flag)
 8001412:	e7df      	b.n	80013d4 <led1_task_func+0x8>
 8001414:	2000000c 	.word	0x2000000c

08001418 <led2_task_func>:
    }
}

void led2_task_func(void *param)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    static uint8_t flag;

    while (1)
    {
        if (flag)
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <led2_task_func+0x48>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <led2_task_func+0x1e>
        {
            led_on(NUM_LED1);
 8001428:	200c      	movs	r0, #12
 800142a:	f7ff f8d7 	bl	80005dc <led_on>
            led_on(NUM_LED2);
 800142e:	200d      	movs	r0, #13
 8001430:	f7ff f8d4 	bl	80005dc <led_on>
 8001434:	e005      	b.n	8001442 <led2_task_func+0x2a>
        }
        else
        {
            led_off(NUM_LED1);
 8001436:	200c      	movs	r0, #12
 8001438:	f7ff f902 	bl	8000640 <led_off>
            led_off(NUM_LED2);
 800143c:	200d      	movs	r0, #13
 800143e:	f7ff f8ff 	bl	8000640 <led_off>
        }

        flag = !flag;
 8001442:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <led2_task_func+0x48>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	bf0c      	ite	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	2300      	movne	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <led2_task_func+0x48>)
 8001454:	701a      	strb	r2, [r3, #0]
        delay_task(1000);
 8001456:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800145a:	f7ff fd47 	bl	8000eec <delay_task>
        if (flag)
 800145e:	e7df      	b.n	8001420 <led2_task_func+0x8>
 8001460:	20002220 	.word	0x20002220

08001464 <led3_task_func>:
    }
}
void led3_task_func(void *param)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    uint32_t signal = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
    static uint8_t sw1_flag; // Flag for SW1 (NUM_LED5)
    static uint8_t sw2_flag; // Flag for SW2 (NUM_LED6)

    while (1)
    {
        if (wait_signal(&signal, 5000))
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fda1 	bl	8000fc0 <wait_signal>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d019      	beq.n	80014b8 <led3_task_func+0x54>
        {
            if (signal == 1) // SW1 pressed
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d109      	bne.n	800149e <led3_task_func+0x3a>
            {
                sw1_flag = !sw1_flag;
 800148a:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <led3_task_func+0x84>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf0c      	ite	eq
 8001492:	2301      	moveq	r3, #1
 8001494:	2300      	movne	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <led3_task_func+0x84>)
 800149c:	701a      	strb	r2, [r3, #0]
            }
            if (signal == 2) // SW2 pressed
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d109      	bne.n	80014b8 <led3_task_func+0x54>
            {
                sw2_flag = !sw2_flag;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <led3_task_func+0x88>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bf0c      	ite	eq
 80014ac:	2301      	moveq	r3, #1
 80014ae:	2300      	movne	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <led3_task_func+0x88>)
 80014b6:	701a      	strb	r2, [r3, #0]
        else
        {
            // timeout occurred, add code here if you want to change led states on timeout.
        }

        if (sw1_flag)
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <led3_task_func+0x84>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <led3_task_func+0x64>
        {
            led_on(NUM_LED5);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff f88b 	bl	80005dc <led_on>
 80014c6:	e002      	b.n	80014ce <led3_task_func+0x6a>
        }
        else
        {
            led_off(NUM_LED5);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff f8b9 	bl	8000640 <led_off>
        }

        if (sw2_flag)
 80014ce:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <led3_task_func+0x88>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <led3_task_func+0x7a>
        {
            led_on(NUM_LED6);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f7ff f880 	bl	80005dc <led_on>
 80014dc:	e7c8      	b.n	8001470 <led3_task_func+0xc>
        }
        else
        {
            led_off(NUM_LED6);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff f8ae 	bl	8000640 <led_off>
        if (wait_signal(&signal, 5000))
 80014e4:	e7c4      	b.n	8001470 <led3_task_func+0xc>
 80014e6:	bf00      	nop
 80014e8:	20002221 	.word	0x20002221
 80014ec:	20002222 	.word	0x20002222

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001528 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014f4:	f7ff ff52 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f8:	480c      	ldr	r0, [pc, #48]	@ (800152c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014fa:	490d      	ldr	r1, [pc, #52]	@ (8001530 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001510:	4c0a      	ldr	r4, [pc, #40]	@ (800153c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800151e:	f001 fc0f 	bl	8002d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff f8c3 	bl	80006ac <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001534:	08002dc8 	.word	0x08002dc8
  ldr r2, =_sbss
 8001538:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800153c:	20002228 	.word	0x20002228

08001540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC_IRQHandler>
	...

08001544 <HAL_Init>:
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
 8001548:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	@ (8001584 <HAL_Init+0x40>)
 800154e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <HAL_Init+0x40>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	@ (8001584 <HAL_Init+0x40>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f92b 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>
 8001572:	2000      	movs	r0, #0
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>
 8001578:	f7ff fda4 	bl	80010c4 <HAL_MspInit>
 800157c:	2300      	movs	r3, #0
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00

08001588 <HAL_InitTick>:
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f943 	bl	8001832 <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015c4:	f000 f90b 	bl	80017de <HAL_NVIC_SetPriority>
 80015c8:	4a06      	ldr	r2, [pc, #24]	@ (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
 80015d2:	2301      	movs	r3, #1
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000014 	.word	0x20000014
 80015e4:	20000010 	.word	0x20000010

080015e8 <HAL_IncTick>:
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000014 	.word	0x20000014
 800160c:	20002224 	.word	0x20002224

08001610 <HAL_GetTick>:
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
 8001614:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20002224 	.word	0x20002224

08001628 <__NVIC_SetPriorityGrouping>:
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001644:	4013      	ands	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	021a      	lsls	r2, r3, #8
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4313      	orrs	r3, r2
 8001650:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4a04      	ldr	r2, [pc, #16]	@ (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	60d3      	str	r3, [r2, #12]
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_GetPriorityGrouping>:
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
 8001674:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <__NVIC_GetPriorityGrouping+0x18>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_EnableIRQ>:
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	2b00      	cmp	r3, #0
 800169c:	db0b      	blt.n	80016b6 <__NVIC_EnableIRQ+0x2a>
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f003 021f 	and.w	r2, r3, #31
 80016a4:	4907      	ldr	r1, [pc, #28]	@ (80016c4 <__NVIC_EnableIRQ+0x38>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2001      	movs	r0, #1
 80016ae:	fa00 f202 	lsl.w	r2, r0, r2
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	@ (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	@ (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	@ 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
 8001764:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
 8001774:	4313      	orrs	r3, r2
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	@ 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <SysTick_Config>:
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
 800179a:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017a8:	f7ff ff8e 	bl	80016c8 <__NVIC_SetPriority>
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	2300      	movs	r3, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff29 	bl	8001628 <__NVIC_SetPriorityGrouping>
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	f7ff ff3e 	bl	8001670 <__NVIC_GetPriorityGrouping>
 80017f4:	6178      	str	r0, [r7, #20]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff ff8e 	bl	800171c <NVIC_EncodePriority>
 8001800:	4602      	mov	r2, r0
 8001802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff5d 	bl	80016c8 <__NVIC_SetPriority>
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_EnableIRQ>:
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff31 	bl	800168c <__NVIC_EnableIRQ>
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_SYSTICK_Config>:
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ffa2 	bl	8001784 <SysTick_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_GPIO_Init>:
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	@ 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	e165      	b.n	8001b34 <HAL_GPIO_Init+0x2e8>
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	429a      	cmp	r2, r3
 8001882:	f040 8154 	bne.w	8001b2e <HAL_GPIO_Init+0x2e2>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d005      	beq.n	800189e <HAL_GPIO_Init+0x52>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d130      	bne.n	8001900 <HAL_GPIO_Init+0xb4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	2201      	movs	r2, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 0201 	and.w	r2, r3, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b03      	cmp	r3, #3
 800190a:	d017      	beq.n	800193c <HAL_GPIO_Init+0xf0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d123      	bne.n	8001990 <HAL_GPIO_Init+0x144>
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80ae 	beq.w	8001b2e <HAL_GPIO_Init+0x2e2>
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b4c <HAL_GPIO_Init+0x300>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019da:	4a5c      	ldr	r2, [pc, #368]	@ (8001b4c <HAL_GPIO_Init+0x300>)
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019e2:	4b5a      	ldr	r3, [pc, #360]	@ (8001b4c <HAL_GPIO_Init+0x300>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a58      	ldr	r2, [pc, #352]	@ (8001b50 <HAL_GPIO_Init+0x304>)
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	3302      	adds	r3, #2
 80019f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	220f      	movs	r2, #15
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4f      	ldr	r2, [pc, #316]	@ (8001b54 <HAL_GPIO_Init+0x308>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d025      	beq.n	8001a66 <HAL_GPIO_Init+0x21a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b58 <HAL_GPIO_Init+0x30c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01f      	beq.n	8001a62 <HAL_GPIO_Init+0x216>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4d      	ldr	r2, [pc, #308]	@ (8001b5c <HAL_GPIO_Init+0x310>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d019      	beq.n	8001a5e <HAL_GPIO_Init+0x212>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b60 <HAL_GPIO_Init+0x314>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0x20e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4b      	ldr	r2, [pc, #300]	@ (8001b64 <HAL_GPIO_Init+0x318>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00d      	beq.n	8001a56 <HAL_GPIO_Init+0x20a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b68 <HAL_GPIO_Init+0x31c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x206>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a49      	ldr	r2, [pc, #292]	@ (8001b6c <HAL_GPIO_Init+0x320>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_GPIO_Init+0x202>
 8001a4a:	2306      	movs	r3, #6
 8001a4c:	e00c      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a4e:	2307      	movs	r3, #7
 8001a50:	e00a      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a52:	2305      	movs	r3, #5
 8001a54:	e008      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a56:	2304      	movs	r3, #4
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e004      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a66:	2300      	movs	r3, #0
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	f002 0203 	and.w	r2, r2, #3
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	4093      	lsls	r3, r2
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	4935      	ldr	r1, [pc, #212]	@ (8001b50 <HAL_GPIO_Init+0x304>)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001a86:	4b3a      	ldr	r3, [pc, #232]	@ (8001b70 <HAL_GPIO_Init+0x324>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x25e>
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	4a31      	ldr	r2, [pc, #196]	@ (8001b70 <HAL_GPIO_Init+0x324>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	6093      	str	r3, [r2, #8]
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b70 <HAL_GPIO_Init+0x324>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x288>
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	4a26      	ldr	r2, [pc, #152]	@ (8001b70 <HAL_GPIO_Init+0x324>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	60d3      	str	r3, [r2, #12]
 8001ada:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <HAL_GPIO_Init+0x324>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x2b2>
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	4a1c      	ldr	r2, [pc, #112]	@ (8001b70 <HAL_GPIO_Init+0x324>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6053      	str	r3, [r2, #4]
 8001b04:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <HAL_GPIO_Init+0x324>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2dc>
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	4a11      	ldr	r2, [pc, #68]	@ (8001b70 <HAL_GPIO_Init+0x324>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3301      	adds	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	2b0f      	cmp	r3, #15
 8001b38:	f67f ae96 	bls.w	8001868 <HAL_GPIO_Init+0x1c>
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3724      	adds	r7, #36	@ 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40013800 	.word	0x40013800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40021400 	.word	0x40021400
 8001b6c:	40021800 	.word	0x40021800
 8001b70:	40013c00 	.word	0x40013c00

08001b74 <HAL_GPIO_ReadPin>:
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_GPIO_ReadPin+0x1e>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e001      	b.n	8001b96 <HAL_GPIO_ReadPin+0x22>
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_GPIO_WritePin>:
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
 8001bc0:	e003      	b.n	8001bca <HAL_GPIO_WritePin+0x26>
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	619a      	str	r2, [r3, #24]
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_RCC_ClockConfig>:
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x14>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0cc      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
 8001bec:	4b68      	ldr	r3, [pc, #416]	@ (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d90c      	bls.n	8001c14 <HAL_RCC_ClockConfig+0x3c>
 8001bfa:	4b65      	ldr	r3, [pc, #404]	@ (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	4b63      	ldr	r3, [pc, #396]	@ (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x3c>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0b8      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d020      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x8a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x60>
 8001c2c:	4b59      	ldr	r3, [pc, #356]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a58      	ldr	r2, [pc, #352]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c36:	6093      	str	r3, [r2, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x78>
 8001c44:	4b53      	ldr	r3, [pc, #332]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4a52      	ldr	r2, [pc, #328]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c4e:	6093      	str	r3, [r2, #8]
 8001c50:	4b50      	ldr	r3, [pc, #320]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	494d      	ldr	r1, [pc, #308]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d044      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x120>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xae>
 8001c76:	4b47      	ldr	r3, [pc, #284]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d119      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e07f      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_ClockConfig+0xbe>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xce>
 8001c96:	4b3f      	ldr	r3, [pc, #252]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e06f      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e067      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
 8001cb6:	4b37      	ldr	r3, [pc, #220]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f023 0203 	bic.w	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4934      	ldr	r1, [pc, #208]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
 8001cc8:	f7ff fca2 	bl	8001610 <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x10e>
 8001cd0:	f7ff fc9e 	bl	8001610 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x10e>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e04f      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 020c 	and.w	r2, r3, #12
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d1eb      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xf8>
 8001cf8:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d20c      	bcs.n	8001d20 <HAL_RCC_ClockConfig+0x148>
 8001d06:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]
 8001d0e:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x148>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e032      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x166>
 8001d2c:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4916      	ldr	r1, [pc, #88]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d009      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x186>
 8001d4a:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	490e      	ldr	r1, [pc, #56]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
 8001d5e:	f000 f855 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001d62:	4602      	mov	r2, r0
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	490a      	ldr	r1, [pc, #40]	@ (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	5ccb      	ldrb	r3, [r1, r3]
 8001d72:	fa22 f303 	lsr.w	r3, r2, r3
 8001d76:	4a09      	ldr	r2, [pc, #36]	@ (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fc02 	bl	8001588 <HAL_InitTick>
 8001d84:	2300      	movs	r3, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023c00 	.word	0x40023c00
 8001d94:	40023800 	.word	0x40023800
 8001d98:	08002da0 	.word	0x08002da0
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	20000010 	.word	0x20000010

08001da4 <HAL_RCC_GetHCLKFreq>:
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4b03      	ldr	r3, [pc, #12]	@ (8001db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000008 	.word	0x20000008

08001dbc <HAL_RCC_GetPCLK1Freq>:
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	f7ff fff0 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0a9b      	lsrs	r3, r3, #10
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4903      	ldr	r1, [pc, #12]	@ (8001de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	08002db0 	.word	0x08002db0

08001de4 <HAL_RCC_GetPCLK2Freq>:
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	f7ff ffdc 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	0b5b      	lsrs	r3, r3, #13
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	4903      	ldr	r1, [pc, #12]	@ (8001e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	08002db0 	.word	0x08002db0

08001e0c <HAL_RCC_GetSysClockFreq>:
 8001e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e10:	b0ae      	sub	sp, #184	@ 0xb8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e32:	4bcb      	ldr	r3, [pc, #812]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	f200 8206 	bhi.w	800224c <HAL_RCC_GetSysClockFreq+0x440>
 8001e40:	a201      	add	r2, pc, #4	@ (adr r2, 8001e48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	08001e7d 	.word	0x08001e7d
 8001e4c:	0800224d 	.word	0x0800224d
 8001e50:	0800224d 	.word	0x0800224d
 8001e54:	0800224d 	.word	0x0800224d
 8001e58:	08001e85 	.word	0x08001e85
 8001e5c:	0800224d 	.word	0x0800224d
 8001e60:	0800224d 	.word	0x0800224d
 8001e64:	0800224d 	.word	0x0800224d
 8001e68:	08001e8d 	.word	0x08001e8d
 8001e6c:	0800224d 	.word	0x0800224d
 8001e70:	0800224d 	.word	0x0800224d
 8001e74:	0800224d 	.word	0x0800224d
 8001e78:	0800207d 	.word	0x0800207d
 8001e7c:	4bb9      	ldr	r3, [pc, #740]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e82:	e1e7      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x448>
 8001e84:	4bb8      	ldr	r3, [pc, #736]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e8a:	e1e3      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x448>
 8001e8c:	4bb4      	ldr	r3, [pc, #720]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001e98:	4bb1      	ldr	r3, [pc, #708]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d071      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x17c>
 8001ea4:	4bae      	ldr	r3, [pc, #696]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001eb0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ebc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001ec6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001eca:	4622      	mov	r2, r4
 8001ecc:	462b      	mov	r3, r5
 8001ece:	f04f 0000 	mov.w	r0, #0
 8001ed2:	f04f 0100 	mov.w	r1, #0
 8001ed6:	0159      	lsls	r1, r3, #5
 8001ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001edc:	0150      	lsls	r0, r2, #5
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	1a51      	subs	r1, r2, r1
 8001ee6:	6439      	str	r1, [r7, #64]	@ 0x40
 8001ee8:	4629      	mov	r1, r5
 8001eea:	eb63 0301 	sbc.w	r3, r3, r1
 8001eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001efc:	4649      	mov	r1, r9
 8001efe:	018b      	lsls	r3, r1, #6
 8001f00:	4641      	mov	r1, r8
 8001f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f06:	4641      	mov	r1, r8
 8001f08:	018a      	lsls	r2, r1, #6
 8001f0a:	4641      	mov	r1, r8
 8001f0c:	1a51      	subs	r1, r2, r1
 8001f0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f10:	4649      	mov	r1, r9
 8001f12:	eb63 0301 	sbc.w	r3, r3, r1
 8001f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001f24:	4649      	mov	r1, r9
 8001f26:	00cb      	lsls	r3, r1, #3
 8001f28:	4641      	mov	r1, r8
 8001f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f2e:	4641      	mov	r1, r8
 8001f30:	00ca      	lsls	r2, r1, #3
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	4622      	mov	r2, r4
 8001f3a:	189b      	adds	r3, r3, r2
 8001f3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f3e:	462b      	mov	r3, r5
 8001f40:	460a      	mov	r2, r1
 8001f42:	eb42 0303 	adc.w	r3, r2, r3
 8001f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f54:	4629      	mov	r1, r5
 8001f56:	024b      	lsls	r3, r1, #9
 8001f58:	4621      	mov	r1, r4
 8001f5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f5e:	4621      	mov	r1, r4
 8001f60:	024a      	lsls	r2, r1, #9
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f78:	f7fe f962 	bl	8000240 <__aeabi_uldivmod>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4613      	mov	r3, r2
 8001f82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f86:	e067      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x24c>
 8001f88:	4b75      	ldr	r3, [pc, #468]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f94:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fa6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001faa:	4622      	mov	r2, r4
 8001fac:	462b      	mov	r3, r5
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	0159      	lsls	r1, r3, #5
 8001fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fbc:	0150      	lsls	r0, r2, #5
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	1a51      	subs	r1, r2, r1
 8001fc6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001fc8:	4629      	mov	r1, r5
 8001fca:	eb63 0301 	sbc.w	r3, r3, r1
 8001fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001fdc:	4649      	mov	r1, r9
 8001fde:	018b      	lsls	r3, r1, #6
 8001fe0:	4641      	mov	r1, r8
 8001fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fe6:	4641      	mov	r1, r8
 8001fe8:	018a      	lsls	r2, r1, #6
 8001fea:	4641      	mov	r1, r8
 8001fec:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ff0:	4649      	mov	r1, r9
 8001ff2:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002002:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002006:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800200a:	4692      	mov	sl, r2
 800200c:	469b      	mov	fp, r3
 800200e:	4623      	mov	r3, r4
 8002010:	eb1a 0303 	adds.w	r3, sl, r3
 8002014:	623b      	str	r3, [r7, #32]
 8002016:	462b      	mov	r3, r5
 8002018:	eb4b 0303 	adc.w	r3, fp, r3
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800202a:	4629      	mov	r1, r5
 800202c:	028b      	lsls	r3, r1, #10
 800202e:	4621      	mov	r1, r4
 8002030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002034:	4621      	mov	r1, r4
 8002036:	028a      	lsls	r2, r1, #10
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002040:	2200      	movs	r2, #0
 8002042:	673b      	str	r3, [r7, #112]	@ 0x70
 8002044:	677a      	str	r2, [r7, #116]	@ 0x74
 8002046:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800204a:	f7fe f8f9 	bl	8000240 <__aeabi_uldivmod>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4613      	mov	r3, r2
 8002054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002058:	4b41      	ldr	r3, [pc, #260]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	0c1b      	lsrs	r3, r3, #16
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	3301      	adds	r3, #1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800206a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800206e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002072:	fbb2 f3f3 	udiv	r3, r2, r3
 8002076:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800207a:	e0eb      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x448>
 800207c:	4b38      	ldr	r3, [pc, #224]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002084:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002088:	4b35      	ldr	r3, [pc, #212]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d06b      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x360>
 8002094:	4b32      	ldr	r3, [pc, #200]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	099b      	lsrs	r3, r3, #6
 800209a:	2200      	movs	r2, #0
 800209c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800209e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80020a8:	2300      	movs	r3, #0
 80020aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80020ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80020b0:	4622      	mov	r2, r4
 80020b2:	462b      	mov	r3, r5
 80020b4:	f04f 0000 	mov.w	r0, #0
 80020b8:	f04f 0100 	mov.w	r1, #0
 80020bc:	0159      	lsls	r1, r3, #5
 80020be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c2:	0150      	lsls	r0, r2, #5
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4621      	mov	r1, r4
 80020ca:	1a51      	subs	r1, r2, r1
 80020cc:	61b9      	str	r1, [r7, #24]
 80020ce:	4629      	mov	r1, r5
 80020d0:	eb63 0301 	sbc.w	r3, r3, r1
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80020e2:	4659      	mov	r1, fp
 80020e4:	018b      	lsls	r3, r1, #6
 80020e6:	4651      	mov	r1, sl
 80020e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ec:	4651      	mov	r1, sl
 80020ee:	018a      	lsls	r2, r1, #6
 80020f0:	4651      	mov	r1, sl
 80020f2:	ebb2 0801 	subs.w	r8, r2, r1
 80020f6:	4659      	mov	r1, fp
 80020f8:	eb63 0901 	sbc.w	r9, r3, r1
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002108:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800210c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002110:	4690      	mov	r8, r2
 8002112:	4699      	mov	r9, r3
 8002114:	4623      	mov	r3, r4
 8002116:	eb18 0303 	adds.w	r3, r8, r3
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	462b      	mov	r3, r5
 800211e:	eb49 0303 	adc.w	r3, r9, r3
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002130:	4629      	mov	r1, r5
 8002132:	024b      	lsls	r3, r1, #9
 8002134:	4621      	mov	r1, r4
 8002136:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800213a:	4621      	mov	r1, r4
 800213c:	024a      	lsls	r2, r1, #9
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002146:	2200      	movs	r2, #0
 8002148:	65bb      	str	r3, [r7, #88]	@ 0x58
 800214a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800214c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002150:	f7fe f876 	bl	8000240 <__aeabi_uldivmod>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4613      	mov	r3, r2
 800215a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800215e:	e065      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x420>
 8002160:	40023800 	.word	0x40023800
 8002164:	00f42400 	.word	0x00f42400
 8002168:	007a1200 	.word	0x007a1200
 800216c:	4b3d      	ldr	r3, [pc, #244]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x458>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	2200      	movs	r2, #0
 8002174:	4618      	mov	r0, r3
 8002176:	4611      	mov	r1, r2
 8002178:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800217c:	653b      	str	r3, [r7, #80]	@ 0x50
 800217e:	2300      	movs	r3, #0
 8002180:	657b      	str	r3, [r7, #84]	@ 0x54
 8002182:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002186:	4642      	mov	r2, r8
 8002188:	464b      	mov	r3, r9
 800218a:	f04f 0000 	mov.w	r0, #0
 800218e:	f04f 0100 	mov.w	r1, #0
 8002192:	0159      	lsls	r1, r3, #5
 8002194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002198:	0150      	lsls	r0, r2, #5
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4641      	mov	r1, r8
 80021a0:	1a51      	subs	r1, r2, r1
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	4649      	mov	r1, r9
 80021a6:	eb63 0301 	sbc.w	r3, r3, r1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021b8:	4659      	mov	r1, fp
 80021ba:	018b      	lsls	r3, r1, #6
 80021bc:	4651      	mov	r1, sl
 80021be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021c2:	4651      	mov	r1, sl
 80021c4:	018a      	lsls	r2, r1, #6
 80021c6:	4651      	mov	r1, sl
 80021c8:	1a54      	subs	r4, r2, r1
 80021ca:	4659      	mov	r1, fp
 80021cc:	eb63 0501 	sbc.w	r5, r3, r1
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	00eb      	lsls	r3, r5, #3
 80021da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021de:	00e2      	lsls	r2, r4, #3
 80021e0:	4614      	mov	r4, r2
 80021e2:	461d      	mov	r5, r3
 80021e4:	4643      	mov	r3, r8
 80021e6:	18e3      	adds	r3, r4, r3
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	464b      	mov	r3, r9
 80021ec:	eb45 0303 	adc.w	r3, r5, r3
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021fe:	4629      	mov	r1, r5
 8002200:	028b      	lsls	r3, r1, #10
 8002202:	4621      	mov	r1, r4
 8002204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002208:	4621      	mov	r1, r4
 800220a:	028a      	lsls	r2, r1, #10
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002214:	2200      	movs	r2, #0
 8002216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002218:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800221a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800221e:	f7fe f80f 	bl	8000240 <__aeabi_uldivmod>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4613      	mov	r3, r2
 8002228:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800222c:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x458>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	0f1b      	lsrs	r3, r3, #28
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800223a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800223e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800224a:	e003      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x448>
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x45c>)
 800224e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002252:	bf00      	nop
 8002254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002258:	4618      	mov	r0, r3
 800225a:	37b8      	adds	r7, #184	@ 0xb8
 800225c:	46bd      	mov	sp, r7
 800225e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	00f42400 	.word	0x00f42400

0800226c <HAL_RCC_OscConfig>:
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
 800227a:	2301      	movs	r3, #1
 800227c:	e28d      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8083 	beq.w	8002392 <HAL_RCC_OscConfig+0x126>
 800228c:	4b94      	ldr	r3, [pc, #592]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b04      	cmp	r3, #4
 8002296:	d019      	beq.n	80022cc <HAL_RCC_OscConfig+0x60>
 8002298:	4b91      	ldr	r3, [pc, #580]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x46>
 80022a4:	4b8e      	ldr	r3, [pc, #568]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022b0:	d00c      	beq.n	80022cc <HAL_RCC_OscConfig+0x60>
 80022b2:	4b8b      	ldr	r3, [pc, #556]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d112      	bne.n	80022e4 <HAL_RCC_OscConfig+0x78>
 80022be:	4b88      	ldr	r3, [pc, #544]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022ca:	d10b      	bne.n	80022e4 <HAL_RCC_OscConfig+0x78>
 80022cc:	4b84      	ldr	r3, [pc, #528]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d05b      	beq.n	8002390 <HAL_RCC_OscConfig+0x124>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d157      	bne.n	8002390 <HAL_RCC_OscConfig+0x124>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e25a      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ec:	d106      	bne.n	80022fc <HAL_RCC_OscConfig+0x90>
 80022ee:	4b7c      	ldr	r3, [pc, #496]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a7b      	ldr	r2, [pc, #492]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0xcc>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0xb4>
 8002306:	4b76      	ldr	r3, [pc, #472]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a75      	ldr	r2, [pc, #468]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b73      	ldr	r3, [pc, #460]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a72      	ldr	r2, [pc, #456]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xcc>
 8002320:	4b6f      	ldr	r3, [pc, #444]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6e      	ldr	r2, [pc, #440]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b6c      	ldr	r3, [pc, #432]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6b      	ldr	r2, [pc, #428]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0xfc>
 8002340:	f7ff f966 	bl	8001610 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0xee>
 8002348:	f7ff f962 	bl	8001610 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xee>
 8002356:	2303      	movs	r3, #3
 8002358:	e21f      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 800235a:	4b61      	ldr	r3, [pc, #388]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0xdc>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x126>
 8002368:	f7ff f952 	bl	8001610 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x116>
 8002370:	f7ff f94e 	bl	8001610 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	@ 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x116>
 800237e:	2303      	movs	r3, #3
 8002380:	e20b      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 8002382:	4b57      	ldr	r3, [pc, #348]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x104>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x126>
 8002390:	bf00      	nop
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d06f      	beq.n	800247e <HAL_RCC_OscConfig+0x212>
 800239e:	4b50      	ldr	r3, [pc, #320]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d017      	beq.n	80023da <HAL_RCC_OscConfig+0x16e>
 80023aa:	4b4d      	ldr	r3, [pc, #308]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d105      	bne.n	80023c2 <HAL_RCC_OscConfig+0x156>
 80023b6:	4b4a      	ldr	r3, [pc, #296]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_RCC_OscConfig+0x16e>
 80023c2:	4b47      	ldr	r3, [pc, #284]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	d11c      	bne.n	8002408 <HAL_RCC_OscConfig+0x19c>
 80023ce:	4b44      	ldr	r3, [pc, #272]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d116      	bne.n	8002408 <HAL_RCC_OscConfig+0x19c>
 80023da:	4b41      	ldr	r3, [pc, #260]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_RCC_OscConfig+0x186>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_OscConfig+0x186>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e1d3      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 80023f2:	4b3b      	ldr	r3, [pc, #236]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4937      	ldr	r1, [pc, #220]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
 8002406:	e03a      	b.n	800247e <HAL_RCC_OscConfig+0x212>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_OscConfig+0x1e6>
 8002410:	4b34      	ldr	r3, [pc, #208]	@ (80024e4 <HAL_RCC_OscConfig+0x278>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f7ff f8fb 	bl	8001610 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x1c4>
 800241e:	f7ff f8f7 	bl	8001610 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x1c4>
 800242c:	2303      	movs	r3, #3
 800242e:	e1b4      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 8002430:	4b2b      	ldr	r3, [pc, #172]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x1b2>
 800243c:	4b28      	ldr	r3, [pc, #160]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4925      	ldr	r1, [pc, #148]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 800244c:	4313      	orrs	r3, r2
 800244e:	600b      	str	r3, [r1, #0]
 8002450:	e015      	b.n	800247e <HAL_RCC_OscConfig+0x212>
 8002452:	4b24      	ldr	r3, [pc, #144]	@ (80024e4 <HAL_RCC_OscConfig+0x278>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	f7ff f8da 	bl	8001610 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x206>
 8002460:	f7ff f8d6 	bl	8001610 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x206>
 800246e:	2303      	movs	r3, #3
 8002470:	e193      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 8002472:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x1f4>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d036      	beq.n	80024f8 <HAL_RCC_OscConfig+0x28c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCC_OscConfig+0x254>
 8002492:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f7ff f8ba 	bl	8001610 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x246>
 80024a0:	f7ff f8b6 	bl	8001610 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x246>
 80024ae:	2303      	movs	r3, #3
 80024b0:	e173      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 80024b2:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80024b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x234>
 80024be:	e01b      	b.n	80024f8 <HAL_RCC_OscConfig+0x28c>
 80024c0:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	f7ff f8a3 	bl	8001610 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]
 80024cc:	e00e      	b.n	80024ec <HAL_RCC_OscConfig+0x280>
 80024ce:	f7ff f89f 	bl	8001610 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d907      	bls.n	80024ec <HAL_RCC_OscConfig+0x280>
 80024dc:	2303      	movs	r3, #3
 80024de:	e15c      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 80024e0:	40023800 	.word	0x40023800
 80024e4:	42470000 	.word	0x42470000
 80024e8:	42470e80 	.word	0x42470e80
 80024ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 80024ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ea      	bne.n	80024ce <HAL_RCC_OscConfig+0x262>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8097 	beq.w	8002634 <HAL_RCC_OscConfig+0x3c8>
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]
 800250a:	4b83      	ldr	r3, [pc, #524]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <HAL_RCC_OscConfig+0x2ca>
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	4b7f      	ldr	r3, [pc, #508]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	4a7e      	ldr	r2, [pc, #504]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	@ 0x40
 8002526:	4b7c      	ldr	r3, [pc, #496]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
 8002536:	4b79      	ldr	r3, [pc, #484]	@ (800271c <HAL_RCC_OscConfig+0x4b0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d118      	bne.n	8002574 <HAL_RCC_OscConfig+0x308>
 8002542:	4b76      	ldr	r3, [pc, #472]	@ (800271c <HAL_RCC_OscConfig+0x4b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a75      	ldr	r2, [pc, #468]	@ (800271c <HAL_RCC_OscConfig+0x4b0>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	f7ff f85f 	bl	8001610 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x2fc>
 8002556:	f7ff f85b 	bl	8001610 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x2fc>
 8002564:	2303      	movs	r3, #3
 8002566:	e118      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 8002568:	4b6c      	ldr	r3, [pc, #432]	@ (800271c <HAL_RCC_OscConfig+0x4b0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x2ea>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x31e>
 800257c:	4b66      	ldr	r3, [pc, #408]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002580:	4a65      	ldr	r2, [pc, #404]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6713      	str	r3, [r2, #112]	@ 0x70
 8002588:	e01c      	b.n	80025c4 <HAL_RCC_OscConfig+0x358>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b05      	cmp	r3, #5
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0x340>
 8002592:	4b61      	ldr	r3, [pc, #388]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002596:	4a60      	ldr	r2, [pc, #384]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	6713      	str	r3, [r2, #112]	@ 0x70
 800259e:	4b5e      	ldr	r3, [pc, #376]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025aa:	e00b      	b.n	80025c4 <HAL_RCC_OscConfig+0x358>
 80025ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 80025ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b0:	4a59      	ldr	r2, [pc, #356]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b8:	4b57      	ldr	r3, [pc, #348]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025bc:	4a56      	ldr	r2, [pc, #344]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d015      	beq.n	80025f8 <HAL_RCC_OscConfig+0x38c>
 80025cc:	f7ff f820 	bl	8001610 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_OscConfig+0x37e>
 80025d4:	f7ff f81c 	bl	8001610 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x37e>
 80025e6:	2303      	movs	r3, #3
 80025e8:	e0d7      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 80025ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0ee      	beq.n	80025d4 <HAL_RCC_OscConfig+0x368>
 80025f6:	e014      	b.n	8002622 <HAL_RCC_OscConfig+0x3b6>
 80025f8:	f7ff f80a 	bl	8001610 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_OscConfig+0x3aa>
 8002600:	f7ff f806 	bl	8001610 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x3aa>
 8002612:	2303      	movs	r3, #3
 8002614:	e0c1      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 8002616:	4b40      	ldr	r3, [pc, #256]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1ee      	bne.n	8002600 <HAL_RCC_OscConfig+0x394>
 8002622:	7dfb      	ldrb	r3, [r7, #23]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d105      	bne.n	8002634 <HAL_RCC_OscConfig+0x3c8>
 8002628:	4b3b      	ldr	r3, [pc, #236]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	4a3a      	ldr	r2, [pc, #232]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 800262e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002632:	6413      	str	r3, [r2, #64]	@ 0x40
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80ad 	beq.w	8002798 <HAL_RCC_OscConfig+0x52c>
 800263e:	4b36      	ldr	r3, [pc, #216]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b08      	cmp	r3, #8
 8002648:	d060      	beq.n	800270c <HAL_RCC_OscConfig+0x4a0>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d145      	bne.n	80026de <HAL_RCC_OscConfig+0x472>
 8002652:	4b33      	ldr	r3, [pc, #204]	@ (8002720 <HAL_RCC_OscConfig+0x4b4>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	f7fe ffda 	bl	8001610 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x406>
 8002660:	f7fe ffd6 	bl	8001610 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x406>
 800266e:	2303      	movs	r3, #3
 8002670:	e093      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 8002672:	4b29      	ldr	r3, [pc, #164]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x3f4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69da      	ldr	r2, [r3, #28]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	019b      	lsls	r3, r3, #6
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	3b01      	subs	r3, #1
 8002698:	041b      	lsls	r3, r3, #16
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a8:	071b      	lsls	r3, r3, #28
 80026aa:	491b      	ldr	r1, [pc, #108]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HAL_RCC_OscConfig+0x4b4>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f7fe ffab 	bl	8001610 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x464>
 80026be:	f7fe ffa7 	bl	8001610 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x464>
 80026cc:	2303      	movs	r3, #3
 80026ce:	e064      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x452>
 80026dc:	e05c      	b.n	8002798 <HAL_RCC_OscConfig+0x52c>
 80026de:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <HAL_RCC_OscConfig+0x4b4>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f7fe ff94 	bl	8001610 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x492>
 80026ec:	f7fe ff90 	bl	8001610 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x492>
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04d      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <HAL_RCC_OscConfig+0x4ac>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x480>
 800270a:	e045      	b.n	8002798 <HAL_RCC_OscConfig+0x52c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d107      	bne.n	8002724 <HAL_RCC_OscConfig+0x4b8>
 8002714:	2301      	movs	r3, #1
 8002716:	e040      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 8002718:	40023800 	.word	0x40023800
 800271c:	40007000 	.word	0x40007000
 8002720:	42470060 	.word	0x42470060
 8002724:	4b1f      	ldr	r3, [pc, #124]	@ (80027a4 <HAL_RCC_OscConfig+0x538>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d030      	beq.n	8002794 <HAL_RCC_OscConfig+0x528>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	429a      	cmp	r2, r3
 800273e:	d129      	bne.n	8002794 <HAL_RCC_OscConfig+0x528>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	429a      	cmp	r2, r3
 800274c:	d122      	bne.n	8002794 <HAL_RCC_OscConfig+0x528>
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002754:	4013      	ands	r3, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800275a:	0192      	lsls	r2, r2, #6
 800275c:	4293      	cmp	r3, r2
 800275e:	d119      	bne.n	8002794 <HAL_RCC_OscConfig+0x528>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	3b01      	subs	r3, #1
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	429a      	cmp	r2, r3
 8002772:	d10f      	bne.n	8002794 <HAL_RCC_OscConfig+0x528>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277e:	061b      	lsls	r3, r3, #24
 8002780:	429a      	cmp	r2, r3
 8002782:	d107      	bne.n	8002794 <HAL_RCC_OscConfig+0x528>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	071b      	lsls	r3, r3, #28
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_OscConfig+0x52c>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 8002798:	2300      	movs	r3, #0
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800

080027a8 <HAL_UART_Init>:
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Init+0x12>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e042      	b.n	8002840 <HAL_UART_Init+0x98>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_UART_Init+0x2c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fca0 	bl	8001114 <HAL_UART_MspInit>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	@ 0x24
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027ea:	60da      	str	r2, [r3, #12]
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f82b 	bl	8002848 <UART_SetConfig>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002810:	615a      	str	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	645a      	str	r2, [r3, #68]	@ 0x44
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	635a      	str	r2, [r3, #52]	@ 0x34
 800283e:	2300      	movs	r3, #0
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <UART_SetConfig>:
 8002848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800284c:	b0c0      	sub	sp, #256	@ 0x100
 800284e:	af00      	add	r7, sp, #0
 8002850:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002864:	68d9      	ldr	r1, [r3, #12]
 8002866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	ea40 0301 	orr.w	r3, r0, r1
 8002870:	6113      	str	r3, [r2, #16]
 8002872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	431a      	orrs	r2, r3
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	431a      	orrs	r2, r3
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028a0:	f021 010c 	bic.w	r1, r1, #12
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028ae:	430b      	orrs	r3, r1
 80028b0:	60d3      	str	r3, [r2, #12]
 80028b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c2:	6999      	ldr	r1, [r3, #24]
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	ea40 0301 	orr.w	r3, r0, r1
 80028ce:	6153      	str	r3, [r2, #20]
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b8f      	ldr	r3, [pc, #572]	@ (8002b14 <UART_SetConfig+0x2cc>)
 80028d8:	429a      	cmp	r2, r3
 80028da:	d005      	beq.n	80028e8 <UART_SetConfig+0xa0>
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002b18 <UART_SetConfig+0x2d0>)
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d104      	bne.n	80028f2 <UART_SetConfig+0xaa>
 80028e8:	f7ff fa7c 	bl	8001de4 <HAL_RCC_GetPCLK2Freq>
 80028ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028f0:	e003      	b.n	80028fa <UART_SetConfig+0xb2>
 80028f2:	f7ff fa63 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 80028f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002904:	f040 810c 	bne.w	8002b20 <UART_SetConfig+0x2d8>
 8002908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800290c:	2200      	movs	r2, #0
 800290e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002912:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002916:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800291a:	4622      	mov	r2, r4
 800291c:	462b      	mov	r3, r5
 800291e:	1891      	adds	r1, r2, r2
 8002920:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002922:	415b      	adcs	r3, r3
 8002924:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002926:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800292a:	4621      	mov	r1, r4
 800292c:	eb12 0801 	adds.w	r8, r2, r1
 8002930:	4629      	mov	r1, r5
 8002932:	eb43 0901 	adc.w	r9, r3, r1
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800294a:	4690      	mov	r8, r2
 800294c:	4699      	mov	r9, r3
 800294e:	4623      	mov	r3, r4
 8002950:	eb18 0303 	adds.w	r3, r8, r3
 8002954:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002958:	462b      	mov	r3, r5
 800295a:	eb49 0303 	adc.w	r3, r9, r3
 800295e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800296e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002972:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002976:	460b      	mov	r3, r1
 8002978:	18db      	adds	r3, r3, r3
 800297a:	653b      	str	r3, [r7, #80]	@ 0x50
 800297c:	4613      	mov	r3, r2
 800297e:	eb42 0303 	adc.w	r3, r2, r3
 8002982:	657b      	str	r3, [r7, #84]	@ 0x54
 8002984:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002988:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800298c:	f7fd fc58 	bl	8000240 <__aeabi_uldivmod>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4b61      	ldr	r3, [pc, #388]	@ (8002b1c <UART_SetConfig+0x2d4>)
 8002996:	fba3 2302 	umull	r2, r3, r3, r2
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	011c      	lsls	r4, r3, #4
 800299e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029a2:	2200      	movs	r2, #0
 80029a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029b0:	4642      	mov	r2, r8
 80029b2:	464b      	mov	r3, r9
 80029b4:	1891      	adds	r1, r2, r2
 80029b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029b8:	415b      	adcs	r3, r3
 80029ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029c0:	4641      	mov	r1, r8
 80029c2:	eb12 0a01 	adds.w	sl, r2, r1
 80029c6:	4649      	mov	r1, r9
 80029c8:	eb43 0b01 	adc.w	fp, r3, r1
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029e0:	4692      	mov	sl, r2
 80029e2:	469b      	mov	fp, r3
 80029e4:	4643      	mov	r3, r8
 80029e6:	eb1a 0303 	adds.w	r3, sl, r3
 80029ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029ee:	464b      	mov	r3, r9
 80029f0:	eb4b 0303 	adc.w	r3, fp, r3
 80029f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	18db      	adds	r3, r3, r3
 8002a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a12:	4613      	mov	r3, r2
 8002a14:	eb42 0303 	adc.w	r3, r2, r3
 8002a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a22:	f7fd fc0d 	bl	8000240 <__aeabi_uldivmod>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b1c <UART_SetConfig+0x2d4>)
 8002a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2264      	movs	r2, #100	@ 0x64
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	1acb      	subs	r3, r1, r3
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a42:	4b36      	ldr	r3, [pc, #216]	@ (8002b1c <UART_SetConfig+0x2d4>)
 8002a44:	fba3 2302 	umull	r2, r3, r3, r2
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a50:	441c      	add	r4, r3
 8002a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a64:	4642      	mov	r2, r8
 8002a66:	464b      	mov	r3, r9
 8002a68:	1891      	adds	r1, r2, r2
 8002a6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a6c:	415b      	adcs	r3, r3
 8002a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a74:	4641      	mov	r1, r8
 8002a76:	1851      	adds	r1, r2, r1
 8002a78:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	414b      	adcs	r3, r1
 8002a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a8c:	4659      	mov	r1, fp
 8002a8e:	00cb      	lsls	r3, r1, #3
 8002a90:	4651      	mov	r1, sl
 8002a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a96:	4651      	mov	r1, sl
 8002a98:	00ca      	lsls	r2, r1, #3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002aa8:	464b      	mov	r3, r9
 8002aaa:	460a      	mov	r2, r1
 8002aac:	eb42 0303 	adc.w	r3, r2, r3
 8002ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ac0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ac4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ac8:	460b      	mov	r3, r1
 8002aca:	18db      	adds	r3, r3, r3
 8002acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ace:	4613      	mov	r3, r2
 8002ad0:	eb42 0303 	adc.w	r3, r2, r3
 8002ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ad6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ada:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ade:	f7fd fbaf 	bl	8000240 <__aeabi_uldivmod>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <UART_SetConfig+0x2d4>)
 8002ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	2164      	movs	r1, #100	@ 0x64
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	3332      	adds	r3, #50	@ 0x32
 8002afa:	4a08      	ldr	r2, [pc, #32]	@ (8002b1c <UART_SetConfig+0x2d4>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	f003 0207 	and.w	r2, r3, #7
 8002b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4422      	add	r2, r4
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	e106      	b.n	8002d20 <UART_SetConfig+0x4d8>
 8002b12:	bf00      	nop
 8002b14:	40011000 	.word	0x40011000
 8002b18:	40011400 	.word	0x40011400
 8002b1c:	51eb851f 	.word	0x51eb851f
 8002b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b24:	2200      	movs	r2, #0
 8002b26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b32:	4642      	mov	r2, r8
 8002b34:	464b      	mov	r3, r9
 8002b36:	1891      	adds	r1, r2, r2
 8002b38:	6239      	str	r1, [r7, #32]
 8002b3a:	415b      	adcs	r3, r3
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b42:	4641      	mov	r1, r8
 8002b44:	1854      	adds	r4, r2, r1
 8002b46:	4649      	mov	r1, r9
 8002b48:	eb43 0501 	adc.w	r5, r3, r1
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	00eb      	lsls	r3, r5, #3
 8002b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b5a:	00e2      	lsls	r2, r4, #3
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	461d      	mov	r5, r3
 8002b60:	4643      	mov	r3, r8
 8002b62:	18e3      	adds	r3, r4, r3
 8002b64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b68:	464b      	mov	r3, r9
 8002b6a:	eb45 0303 	adc.w	r3, r5, r3
 8002b6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b8e:	4629      	mov	r1, r5
 8002b90:	008b      	lsls	r3, r1, #2
 8002b92:	4621      	mov	r1, r4
 8002b94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b98:	4621      	mov	r1, r4
 8002b9a:	008a      	lsls	r2, r1, #2
 8002b9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ba0:	f7fd fb4e 	bl	8000240 <__aeabi_uldivmod>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4b60      	ldr	r3, [pc, #384]	@ (8002d2c <UART_SetConfig+0x4e4>)
 8002baa:	fba3 2302 	umull	r2, r3, r3, r2
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	011c      	lsls	r4, r3, #4
 8002bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bc4:	4642      	mov	r2, r8
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	1891      	adds	r1, r2, r2
 8002bca:	61b9      	str	r1, [r7, #24]
 8002bcc:	415b      	adcs	r3, r3
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd4:	4641      	mov	r1, r8
 8002bd6:	1851      	adds	r1, r2, r1
 8002bd8:	6139      	str	r1, [r7, #16]
 8002bda:	4649      	mov	r1, r9
 8002bdc:	414b      	adcs	r3, r1
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bec:	4659      	mov	r1, fp
 8002bee:	00cb      	lsls	r3, r1, #3
 8002bf0:	4651      	mov	r1, sl
 8002bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bf6:	4651      	mov	r1, sl
 8002bf8:	00ca      	lsls	r2, r1, #3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4642      	mov	r2, r8
 8002c02:	189b      	adds	r3, r3, r2
 8002c04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c08:	464b      	mov	r3, r9
 8002c0a:	460a      	mov	r2, r1
 8002c0c:	eb42 0303 	adc.w	r3, r2, r3
 8002c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c2c:	4649      	mov	r1, r9
 8002c2e:	008b      	lsls	r3, r1, #2
 8002c30:	4641      	mov	r1, r8
 8002c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c36:	4641      	mov	r1, r8
 8002c38:	008a      	lsls	r2, r1, #2
 8002c3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c3e:	f7fd faff 	bl	8000240 <__aeabi_uldivmod>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	4b38      	ldr	r3, [pc, #224]	@ (8002d2c <UART_SetConfig+0x4e4>)
 8002c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2264      	movs	r2, #100	@ 0x64
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	1acb      	subs	r3, r1, r3
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	3332      	adds	r3, #50	@ 0x32
 8002c5c:	4a33      	ldr	r2, [pc, #204]	@ (8002d2c <UART_SetConfig+0x4e4>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c68:	441c      	add	r4, r3
 8002c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c6e:	2200      	movs	r2, #0
 8002c70:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c72:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c78:	4642      	mov	r2, r8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	1891      	adds	r1, r2, r2
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	415b      	adcs	r3, r3
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c88:	4641      	mov	r1, r8
 8002c8a:	1851      	adds	r1, r2, r1
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	4649      	mov	r1, r9
 8002c90:	414b      	adcs	r3, r1
 8002c92:	607b      	str	r3, [r7, #4]
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ca0:	4659      	mov	r1, fp
 8002ca2:	00cb      	lsls	r3, r1, #3
 8002ca4:	4651      	mov	r1, sl
 8002ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002caa:	4651      	mov	r1, sl
 8002cac:	00ca      	lsls	r2, r1, #3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	189b      	adds	r3, r3, r2
 8002cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cba:	464b      	mov	r3, r9
 8002cbc:	460a      	mov	r2, r1
 8002cbe:	eb42 0303 	adc.w	r3, r2, r3
 8002cc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cce:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cdc:	4649      	mov	r1, r9
 8002cde:	008b      	lsls	r3, r1, #2
 8002ce0:	4641      	mov	r1, r8
 8002ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ce6:	4641      	mov	r1, r8
 8002ce8:	008a      	lsls	r2, r1, #2
 8002cea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002cee:	f7fd faa7 	bl	8000240 <__aeabi_uldivmod>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d2c <UART_SetConfig+0x4e4>)
 8002cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	2164      	movs	r1, #100	@ 0x64
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	3332      	adds	r3, #50	@ 0x32
 8002d0a:	4a08      	ldr	r2, [pc, #32]	@ (8002d2c <UART_SetConfig+0x4e4>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	f003 020f 	and.w	r2, r3, #15
 8002d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4422      	add	r2, r4
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	bf00      	nop
 8002d22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d26:	46bd      	mov	sp, r7
 8002d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d2c:	51eb851f 	.word	0x51eb851f

08002d30 <memset>:
 8002d30:	4402      	add	r2, r0
 8002d32:	4603      	mov	r3, r0
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d100      	bne.n	8002d3a <memset+0xa>
 8002d38:	4770      	bx	lr
 8002d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d3e:	e7f9      	b.n	8002d34 <memset+0x4>

08002d40 <__libc_init_array>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	4d0d      	ldr	r5, [pc, #52]	@ (8002d78 <__libc_init_array+0x38>)
 8002d44:	4c0d      	ldr	r4, [pc, #52]	@ (8002d7c <__libc_init_array+0x3c>)
 8002d46:	1b64      	subs	r4, r4, r5
 8002d48:	10a4      	asrs	r4, r4, #2
 8002d4a:	2600      	movs	r6, #0
 8002d4c:	42a6      	cmp	r6, r4
 8002d4e:	d109      	bne.n	8002d64 <__libc_init_array+0x24>
 8002d50:	4d0b      	ldr	r5, [pc, #44]	@ (8002d80 <__libc_init_array+0x40>)
 8002d52:	4c0c      	ldr	r4, [pc, #48]	@ (8002d84 <__libc_init_array+0x44>)
 8002d54:	f000 f818 	bl	8002d88 <_init>
 8002d58:	1b64      	subs	r4, r4, r5
 8002d5a:	10a4      	asrs	r4, r4, #2
 8002d5c:	2600      	movs	r6, #0
 8002d5e:	42a6      	cmp	r6, r4
 8002d60:	d105      	bne.n	8002d6e <__libc_init_array+0x2e>
 8002d62:	bd70      	pop	{r4, r5, r6, pc}
 8002d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d68:	4798      	blx	r3
 8002d6a:	3601      	adds	r6, #1
 8002d6c:	e7ee      	b.n	8002d4c <__libc_init_array+0xc>
 8002d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d72:	4798      	blx	r3
 8002d74:	3601      	adds	r6, #1
 8002d76:	e7f2      	b.n	8002d5e <__libc_init_array+0x1e>
 8002d78:	08002dc0 	.word	0x08002dc0
 8002d7c:	08002dc0 	.word	0x08002dc0
 8002d80:	08002dc0 	.word	0x08002dc0
 8002d84:	08002dc4 	.word	0x08002dc4

08002d88 <_init>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	bf00      	nop
 8002d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8e:	bc08      	pop	{r3}
 8002d90:	469e      	mov	lr, r3
 8002d92:	4770      	bx	lr

08002d94 <_fini>:
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d96:	bf00      	nop
 8002d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9a:	bc08      	pop	{r3}
 8002d9c:	469e      	mov	lr, r3
 8002d9e:	4770      	bx	lr
