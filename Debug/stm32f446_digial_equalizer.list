
stm32f446_digial_equalizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b88  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d58  08002d58  00003d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d70  08002d70  00004018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002d70  08002d70  00003d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d78  08002d78  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d78  08002d78  00003d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d7c  08002d7c  00003d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002d80  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002210  20000018  08002d98  00004018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002228  08002d98  00004228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000977f  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6a  00000000  00000000  0000d7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0000f538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f3  00000000  00000000  0000fd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b62  00000000  00000000  0001030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7a2  00000000  00000000  00030e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5055  00000000  00000000  0003b60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100664  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e5c  00000000  00000000  001006a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00102504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002d40 	.word	0x08002d40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	08002d40 	.word	0x08002d40

08000210 <PendSV_Handler>:
 8000210:	f3ef 8009 	mrs	r0, PSP
 8000214:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000218:	4b08      	ldr	r3, [pc, #32]	@ (800023c <PendSV_Handler+0x2c>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	6010      	str	r0, [r2, #0]
 800021e:	b508      	push	{r3, lr}
 8000220:	b672      	cpsid	i
 8000222:	f000 fd4d 	bl	8000cc0 <switching_task>
 8000226:	b662      	cpsie	i
 8000228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	6810      	ldr	r0, [r2, #0]
 8000230:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000234:	f380 8809 	msr	PSP, r0
 8000238:	4770      	bx	lr
 800023a:	0000      	.short	0x0000
 800023c:	200001e8 	.word	0x200001e8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <led_pin_init>:
#include "led.h"
#include "stm32f4xx_it.h"

void led_pin_init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

    HAL_GPIO_WritePin(GPIOB, PIN_LED1 | PIN_LED2 | PIN_LED3 | PIN_LED4, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000586:	4813      	ldr	r0, [pc, #76]	@ (80005d4 <led_pin_init+0x68>)
 8000588:	f001 fae8 	bl	8001b5c <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LED1 | PIN_LED2 | PIN_LED3 | PIN_LED4;
 800058c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000590:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4619      	mov	r1, r3
 80005a2:	480c      	ldr	r0, [pc, #48]	@ (80005d4 <led_pin_init+0x68>)
 80005a4:	f001 f92e 	bl	8001804 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, PIN_LED5 | PIN_LED6 | PIN_LED7, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2107      	movs	r1, #7
 80005ac:	480a      	ldr	r0, [pc, #40]	@ (80005d8 <led_pin_init+0x6c>)
 80005ae:	f001 fad5 	bl	8001b5c <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LED5 | PIN_LED6 | PIN_LED7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <led_pin_init+0x6c>)
 80005c8:	f001 f91c 	bl	8001804 <HAL_GPIO_Init>
}
 80005cc:	bf00      	nop
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40020400 	.word	0x40020400
 80005d8:	40020800 	.word	0x40020800

080005dc <led_on>:

void led_on(unsigned int led)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	2310      	movs	r3, #16
 80005e6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f383 8811 	msr	BASEPRI, r3
}
 80005ee:	bf00      	nop
    disable_interrupts();

    if (led == NUM_LED5 || led == NUM_LED6 || led == NUM_LED7 || led == NUM_LED8)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d008      	beq.n	8000608 <led_on+0x2c>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d005      	beq.n	8000608 <led_on+0x2c>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d002      	beq.n	8000608 <led_on+0x2c>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d105      	bne.n	8000614 <led_on+0x38>
    {
        GPIOC->BSRR = (1 << led);
 8000608:	2201      	movs	r2, #1
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	409a      	lsls	r2, r3
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <led_on+0x5c>)
 8000610:	619a      	str	r2, [r3, #24]
 8000612:	e004      	b.n	800061e <led_on+0x42>
    }
    else
    {
        GPIOB->BSRR = (1 << led);
 8000614:	2201      	movs	r2, #1
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	409a      	lsls	r2, r3
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <led_on+0x60>)
 800061c:	619a      	str	r2, [r3, #24]
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	f383 8811 	msr	BASEPRI, r3
}
 8000628:	bf00      	nop
    }

    enable_interrupts();
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40020800 	.word	0x40020800
 800063c:	40020400 	.word	0x40020400

08000640 <led_off>:

void led_off(unsigned int led)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	2310      	movs	r3, #16
 800064a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f383 8811 	msr	BASEPRI, r3
}
 8000652:	bf00      	nop
    disable_interrupts();

    if (led == NUM_LED5 || led == NUM_LED6 || led == NUM_LED7 || led == NUM_LED8)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d008      	beq.n	800066c <led_off+0x2c>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d005      	beq.n	800066c <led_off+0x2c>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d002      	beq.n	800066c <led_off+0x2c>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d107      	bne.n	800067c <led_off+0x3c>
    {
        GPIOC->BSRR = (1 << led) << 16;
 800066c:	2201      	movs	r2, #1
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	4a0b      	ldr	r2, [pc, #44]	@ (80006a4 <led_off+0x64>)
 8000676:	041b      	lsls	r3, r3, #16
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	e006      	b.n	800068a <led_off+0x4a>
    }
    else
    {
        GPIOB->BSRR = (1 << led) << 16;
 800067c:	2201      	movs	r2, #1
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	fa02 f303 	lsl.w	r3, r2, r3
 8000684:	4a08      	ldr	r2, [pc, #32]	@ (80006a8 <led_off+0x68>)
 8000686:	041b      	lsls	r3, r3, #16
 8000688:	6193      	str	r3, [r2, #24]
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	f383 8811 	msr	BASEPRI, r3
}
 8000694:	bf00      	nop
    }

    enable_interrupts();
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020400 	.word	0x40020400

080006ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80006b0:	f000 ff24 	bl	80014fc <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80006b4:	f000 f838 	bl	8000728 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80006b8:	f000 f8ce 	bl	8000858 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80006bc:	f000 f8a2 	bl	8000804 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */

    init_os();
 80006c0:	f000 fa90 	bl	8000be4 <init_os>

    task1_id = create_task(led1_task_func, nullptr, PRIO_HIGHEST + 1, 1024);
 80006c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c8:	2201      	movs	r2, #1
 80006ca:	2100      	movs	r1, #0
 80006cc:	4810      	ldr	r0, [pc, #64]	@ (8000710 <main+0x64>)
 80006ce:	f000 fb3b 	bl	8000d48 <create_task>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <main+0x68>)
 80006d8:	701a      	strb	r2, [r3, #0]
    task2_id = create_task(led2_task_func, nullptr, PRIO_HIGHEST + 1, 1024);
 80006da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006de:	2201      	movs	r2, #1
 80006e0:	2100      	movs	r1, #0
 80006e2:	480d      	ldr	r0, [pc, #52]	@ (8000718 <main+0x6c>)
 80006e4:	f000 fb30 	bl	8000d48 <create_task>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <main+0x70>)
 80006ee:	701a      	strb	r2, [r3, #0]
    task3_id = create_task(led3_task_func, nullptr, PRIO_HIGHEST, 1024);
 80006f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	4809      	ldr	r0, [pc, #36]	@ (8000720 <main+0x74>)
 80006fa:	f000 fb25 	bl	8000d48 <create_task>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <main+0x78>)
 8000704:	701a      	strb	r2, [r3, #0]

    start_os();
 8000706:	f000 faa9 	bl	8000c5c <start_os>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    while (1)
 800070a:	bf00      	nop
 800070c:	e7fd      	b.n	800070a <main+0x5e>
 800070e:	bf00      	nop
 8000710:	08001385 	.word	0x08001385
 8000714:	2000007c 	.word	0x2000007c
 8000718:	080013d1 	.word	0x080013d1
 800071c:	2000007d 	.word	0x2000007d
 8000720:	0800141d 	.word	0x0800141d
 8000724:	2000007e 	.word	0x2000007e

08000728 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	@ 0x50
 800072c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2234      	movs	r2, #52	@ 0x34
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fad6 	bl	8002ce8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <SystemClock_Config+0xd4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	4a29      	ldr	r2, [pc, #164]	@ (80007fc <SystemClock_Config+0xd4>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	@ 0x40
 800075c:	4b27      	ldr	r3, [pc, #156]	@ (80007fc <SystemClock_Config+0xd4>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <SystemClock_Config+0xd8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000774:	4a22      	ldr	r2, [pc, #136]	@ (8000800 <SystemClock_Config+0xd8>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <SystemClock_Config+0xd8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2310      	movs	r3, #16
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 800079c:	2310      	movs	r3, #16
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 80007a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007a4:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fd34 	bl	8002224 <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x9e>
    {
        Error_Handler();
 80007c2:	f000 f8bb 	bl	800093c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007c6:	230f      	movs	r3, #15
 80007c8:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	2102      	movs	r1, #2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 f9d4 	bl	8001b90 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xca>
    {
        Error_Handler();
 80007ee:	f000 f8a5 	bl	800093c <Error_Handler>
    }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	@ 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f001 ff90 	bl	8002760 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8000846:	f000 f879 	bl	800093c <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000034 	.word	0x20000034
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	@ 0x28
 800085c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b2f      	ldr	r3, [pc, #188]	@ (8000930 <MX_GPIO_Init+0xd8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a2e      	ldr	r2, [pc, #184]	@ (8000930 <MX_GPIO_Init+0xd8>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b2c      	ldr	r3, [pc, #176]	@ (8000930 <MX_GPIO_Init+0xd8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <MX_GPIO_Init+0xd8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a27      	ldr	r2, [pc, #156]	@ (8000930 <MX_GPIO_Init+0xd8>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b25      	ldr	r3, [pc, #148]	@ (8000930 <MX_GPIO_Init+0xd8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <MX_GPIO_Init+0xd8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a20      	ldr	r2, [pc, #128]	@ (8000930 <MX_GPIO_Init+0xd8>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <MX_GPIO_Init+0xd8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_GPIO_Init+0xd8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a19      	ldr	r2, [pc, #100]	@ (8000930 <MX_GPIO_Init+0xd8>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_GPIO_Init+0xd8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2120      	movs	r1, #32
 80008e2:	4814      	ldr	r0, [pc, #80]	@ (8000934 <MX_GPIO_Init+0xdc>)
 80008e4:	f001 f93a 	bl	8001b5c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 80008e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	480e      	ldr	r0, [pc, #56]	@ (8000938 <MX_GPIO_Init+0xe0>)
 8000900:	f000 ff80 	bl	8001804 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8000904:	2320      	movs	r3, #32
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	@ (8000934 <MX_GPIO_Init+0xdc>)
 800091c:	f000 ff72 	bl	8001804 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    led_pin_init();
 8000920:	f7ff fe24 	bl	800056c <led_pin_init>
    switch_pin_init();
 8000924:	f000 fcac 	bl	8001280 <switch_pin_init>
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	@ 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000
 8000938:	40020800 	.word	0x40020800

0800093c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	@ (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	@ (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <_insert_ready_task>:
static void _insert_free_task(const uint8_t task_id);
static void _insert_delay_task(const uint8_t task_id);
static void _delete_delay_task(const uint8_t task_id);

static void _insert_ready_task(const uint8_t task_id)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
    ST_Task *ptask = &task_pool[task_id];
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	4613      	mov	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4413      	add	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <_insert_ready_task+0x74>)
 80009b2:	4413      	add	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
    ST_Task **head = &ready_task_pool[ptask->prio].head;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4a15      	ldr	r2, [pc, #84]	@ (8000a14 <_insert_ready_task+0x78>)
 80009be:	4413      	add	r3, r2
 80009c0:	60bb      	str	r3, [r7, #8]

    if (*head == NULL)
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d109      	bne.n	80009de <_insert_ready_task+0x42>
    {
        *head = ptask;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	601a      	str	r2, [r3, #0]
        ptask->next = ptask;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	619a      	str	r2, [r3, #24]
        ptask->prev = ptask;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	61da      	str	r2, [r3, #28]
        ptask->next = *head;

        (*head)->prev->next = ptask;
        (*head)->prev = ptask;
    }
}
 80009dc:	e011      	b.n	8000a02 <_insert_ready_task+0x66>
        ptask->prev = (*head)->prev;
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	69da      	ldr	r2, [r3, #28]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	61da      	str	r2, [r3, #28]
        ptask->next = *head;
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	619a      	str	r2, [r3, #24]
        (*head)->prev->next = ptask;
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	619a      	str	r2, [r3, #24]
        (*head)->prev = ptask;
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	61da      	str	r2, [r3, #28]
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000080 	.word	0x20000080
 8000a14:	200001ec 	.word	0x200001ec

08000a18 <_delete_ready_task>:

static void _delete_ready_task(const uint8_t task_id)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
    ST_Task *ptask = &task_pool[task_id];
 8000a22:	79fa      	ldrb	r2, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	4413      	add	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000a98 <_delete_ready_task+0x80>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
    ST_Task **head = &ready_task_pool[ptask->prio].head;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4a18      	ldr	r2, [pc, #96]	@ (8000a9c <_delete_ready_task+0x84>)
 8000a3a:	4413      	add	r3, r2
 8000a3c:	60bb      	str	r3, [r7, #8]

    if (*head == nullptr)
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d021      	beq.n	8000a8a <_delete_ready_task+0x72>
        return;

    ptask->prev->next = ptask->next;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	6992      	ldr	r2, [r2, #24]
 8000a4e:	619a      	str	r2, [r3, #24]
    ptask->next->prev = ptask->prev;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	69d2      	ldr	r2, [r2, #28]
 8000a58:	61da      	str	r2, [r3, #28]

    if (*head == ptask)
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d10a      	bne.n	8000a7a <_delete_ready_task+0x62>
    {
        *head = (ptask->next == ptask) ? nullptr : ptask->next;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d002      	beq.n	8000a74 <_delete_ready_task+0x5c>
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	e000      	b.n	8000a76 <_delete_ready_task+0x5e>
 8000a74:	2300      	movs	r3, #0
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	6013      	str	r3, [r2, #0]
    }

    ptask->prev = ptask->next = nullptr;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	699a      	ldr	r2, [r3, #24]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	61da      	str	r2, [r3, #28]
 8000a88:	e000      	b.n	8000a8c <_delete_ready_task+0x74>
        return;
 8000a8a:	bf00      	nop
}
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000080 	.word	0x20000080
 8000a9c:	200001ec 	.word	0x200001ec

08000aa0 <_insert_free_task>:

static void _insert_free_task(const uint8_t task_id)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
    ST_Task *ptask = &task_pool[task_id];
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	4613      	mov	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	4413      	add	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4a07      	ldr	r2, [pc, #28]	@ (8000ad4 <_insert_free_task+0x34>)
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
    ptask->next = free_task_pool.head;
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <_insert_free_task+0x38>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	619a      	str	r2, [r3, #24]
    free_task_pool.head = ptask;
 8000ac2:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <_insert_free_task+0x38>)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	20000080 	.word	0x20000080
 8000ad8:	20000218 	.word	0x20000218

08000adc <_insert_delay_task>:

static void _insert_delay_task(const uint8_t task_id)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
    ST_Task *ptask = &task_pool[task_id];
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	4413      	add	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <_insert_delay_task+0x60>)
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]

    if (delay_task_pool.head == nullptr)
 8000af6:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <_insert_delay_task+0x64>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10a      	bne.n	8000b14 <_insert_delay_task+0x38>
    {
        delay_task_pool.head = ptask;
 8000afe:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <_insert_delay_task+0x64>)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	6013      	str	r3, [r2, #0]
        ptask->prev = ptask->next = nullptr;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	699a      	ldr	r2, [r3, #24]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61da      	str	r2, [r3, #28]
        return;
 8000b12:	e00d      	b.n	8000b30 <_insert_delay_task+0x54>
    }

    ptask->prev = nullptr;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
    ptask->next = delay_task_pool.head;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <_insert_delay_task+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	619a      	str	r2, [r3, #24]

    delay_task_pool.head = ptask;
 8000b22:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <_insert_delay_task+0x64>)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	6013      	str	r3, [r2, #0]
    ptask->next->prev = ptask;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	61da      	str	r2, [r3, #28]
}
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000080 	.word	0x20000080
 8000b40:	2000021c 	.word	0x2000021c

08000b44 <_delete_delay_task>:

static void _delete_delay_task(const uint8_t task_id)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
    ST_Task *ptask = &task_pool[task_id];
 8000b4e:	79fa      	ldrb	r2, [r7, #7]
 8000b50:	4613      	mov	r3, r2
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	4413      	add	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4a0f      	ldr	r2, [pc, #60]	@ (8000b98 <_delete_delay_task+0x54>)
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]

    if (ptask->prev != nullptr)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d005      	beq.n	8000b72 <_delete_delay_task+0x2e>
    {
        ptask->prev->next = ptask->next;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	6992      	ldr	r2, [r2, #24]
 8000b6e:	619a      	str	r2, [r3, #24]
 8000b70:	e003      	b.n	8000b7a <_delete_delay_task+0x36>
    }
    else
    {
        delay_task_pool.head = ptask->next;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a09      	ldr	r2, [pc, #36]	@ (8000b9c <_delete_delay_task+0x58>)
 8000b78:	6013      	str	r3, [r2, #0]
    }

    if (ptask->next != nullptr)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d004      	beq.n	8000b8c <_delete_delay_task+0x48>
    {
        ptask->next->prev = ptask->prev;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	69d2      	ldr	r2, [r2, #28]
 8000b8a:	61da      	str	r2, [r3, #28]
    }
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	20000080 	.word	0x20000080
 8000b9c:	2000021c 	.word	0x2000021c

08000ba0 <init_irq>:

void init_irq(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
    uint32_t i;

    SCB->SHP[(uint8_t)SVCall_IRQn - 4] = 0xF << 4;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <init_irq+0x40>)
 8000ba8:	22f0      	movs	r2, #240	@ 0xf0
 8000baa:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
    SCB->SHP[(uint8_t)PendSV_IRQn - 4] = 0xF << 4;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <init_irq+0x40>)
 8000bb0:	22f0      	movs	r2, #240	@ 0xf0
 8000bb2:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112

    // Set IRQ priority
    for (i = 0; i < NUM_IRQS; ++i)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	e008      	b.n	8000bce <init_irq+0x2e>
    {
        NVIC_SetPriority((IRQn_Type)i, IRQ_PRIORITY);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	210e      	movs	r1, #14
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fec0 	bl	8000948 <__NVIC_SetPriority>
    for (i = 0; i < NUM_IRQS; ++i)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bd2:	d9f3      	bls.n	8000bbc <init_irq+0x1c>
    }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <init_os>:

void init_os(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
    int i;

    free_task_pool.head = nullptr;
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <init_os+0x68>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
    delay_task_pool.head = nullptr;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <init_os+0x6c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]

    for (i = 0; i < MAX_TASK; i++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	e019      	b.n	8000c30 <init_os+0x4c>
    {
        task_pool[i].task_id = i;
 8000bfc:	4915      	ldr	r1, [pc, #84]	@ (8000c54 <init_os+0x70>)
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	4613      	mov	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	601a      	str	r2, [r3, #0]
        _insert_free_task(task_pool[i].task_id);
 8000c10:	4910      	ldr	r1, [pc, #64]	@ (8000c54 <init_os+0x70>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	4413      	add	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	3304      	adds	r3, #4
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff3b 	bl	8000aa0 <_insert_free_task>
    for (i = 0; i < MAX_TASK; i++)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b09      	cmp	r3, #9
 8000c34:	dde2      	ble.n	8000bfc <init_os+0x18>
    }

    create_task(idle_task_func, nullptr, PRIO_LOWEST, 128);
 8000c36:	2380      	movs	r3, #128	@ 0x80
 8000c38:	220a      	movs	r2, #10
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4806      	ldr	r0, [pc, #24]	@ (8000c58 <init_os+0x74>)
 8000c3e:	f000 f883 	bl	8000d48 <create_task>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000218 	.word	0x20000218
 8000c50:	2000021c 	.word	0x2000021c
 8000c54:	20000080 	.word	0x20000080
 8000c58:	08001379 	.word	0x08001379

08000c5c <start_os>:

void start_os(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    switching_task();
 8000c60:	f000 f82e 	bl	8000cc0 <switching_task>
    init_irq();
 8000c64:	f7ff ff9c 	bl	8000ba0 <init_irq>

    __asm__ volatile("svc #0");
 8000c68:	df00      	svc	0
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <_allocate_stack>:

static char *_allocate_stack(uint16_t stack_size)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
    stack_size = (stack_size + 7) & ~0x7;
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	3307      	adds	r3, #7
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	f023 0307 	bic.w	r3, r3, #7
 8000c84:	80fb      	strh	r3, [r7, #6]

    char *new_stack = os_stack_ptr - stack_size;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <_allocate_stack+0x48>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]

    if (new_stack < os_stack_limit)
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <_allocate_stack+0x4c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d201      	bcs.n	8000ca0 <_allocate_stack+0x30>
    {
        return nullptr;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e004      	b.n	8000caa <_allocate_stack+0x3a>
    }

    os_stack_ptr = new_stack;
 8000ca0:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <_allocate_stack+0x48>)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6013      	str	r3, [r2, #0]
    return os_stack_ptr;
 8000ca6:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <_allocate_stack+0x48>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <switching_task>:

void switching_task(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
    for (int prio = PRIO_HIGHEST; prio <= PRIO_LOWEST; prio++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	e00f      	b.n	8000cec <switching_task+0x2c>
    {
        if (ready_task_pool[prio].head != nullptr)
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cfc <switching_task+0x3c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d006      	beq.n	8000ce6 <switching_task+0x26>
        {
            current_task_ptr = ready_task_pool[prio].head;
 8000cd8:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <switching_task+0x3c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <switching_task+0x40>)
 8000ce2:	6013      	str	r3, [r2, #0]
            return;
 8000ce4:	e005      	b.n	8000cf2 <switching_task+0x32>
    for (int prio = PRIO_HIGHEST; prio <= PRIO_LOWEST; prio++)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b0a      	cmp	r3, #10
 8000cf0:	ddec      	ble.n	8000ccc <switching_task+0xc>
        }
    }
}
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	200001ec 	.word	0x200001ec
 8000d00:	200001e8 	.word	0x200001e8

08000d04 <get_free_task>:

ST_Task *get_free_task(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
    ST_Task *task;

    if (free_task_pool.head == nullptr)
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <get_free_task+0x40>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <get_free_task+0x12>
    {
        return nullptr;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e00f      	b.n	8000d36 <get_free_task+0x32>
    }

    task = free_task_pool.head;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <get_free_task+0x40>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	607b      	str	r3, [r7, #4]
    free_task_pool.head = task->next;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a08      	ldr	r2, [pc, #32]	@ (8000d44 <get_free_task+0x40>)
 8000d22:	6013      	str	r3, [r2, #0]

    if (free_task_pool.head != nullptr)
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <get_free_task+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <get_free_task+0x30>
    {
        free_task_pool.head->prev = nullptr;
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <get_free_task+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
    }

    return task;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000218 	.word	0x20000218

08000d48 <create_task>:

uint8_t create_task(void (*ptask_func)(void *), void *const para, const int16_t prio, const uint16_t stack_size)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	4611      	mov	r1, r2
 8000d54:	461a      	mov	r2, r3
 8000d56:	460b      	mov	r3, r1
 8000d58:	80fb      	strh	r3, [r7, #6]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	80bb      	strh	r3, [r7, #4]
 8000d5e:	2310      	movs	r3, #16
 8000d60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	f383 8811 	msr	BASEPRI, r3
}
 8000d68:	bf00      	nop
    disable_interrupts();

    ST_Task *free_task_ptr = get_free_task();
 8000d6a:	f7ff ffcb 	bl	8000d04 <get_free_task>
 8000d6e:	61f8      	str	r0, [r7, #28]

    if (free_task_ptr == nullptr || stack_size <= 0 || prio < 0)
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d006      	beq.n	8000d84 <create_task+0x3c>
 8000d76:	88bb      	ldrh	r3, [r7, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <create_task+0x3c>
 8000d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	da01      	bge.n	8000d88 <create_task+0x40>
    {
        return -1;
 8000d84:	23ff      	movs	r3, #255	@ 0xff
 8000d86:	e049      	b.n	8000e1c <create_task+0xd4>
    }

    free_task_ptr->top_of_stack = (unsigned long *)_allocate_stack(stack_size);
 8000d88:	88bb      	ldrh	r3, [r7, #4]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff70 	bl	8000c70 <_allocate_stack>
 8000d90:	4602      	mov	r2, r0
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	601a      	str	r2, [r3, #0]

    if (free_task_ptr->top_of_stack == nullptr)
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d107      	bne.n	8000dae <create_task+0x66>
    {
        _insert_free_task(free_task_ptr->task_id);
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fe7b 	bl	8000aa0 <_insert_free_task>
        return -1;
 8000daa:	23ff      	movs	r3, #255	@ 0xff
 8000dac:	e036      	b.n	8000e1c <create_task+0xd4>
    }

    free_task_ptr->prio = free_task_ptr->origin_prio = prio;
 8000dae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	609a      	str	r2, [r3, #8]
    free_task_ptr->state = TASK_READY;
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2020 	strb.w	r2, [r3, #32]

    free_task_ptr->top_of_stack -= 16;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f1a3 0240 	sub.w	r2, r3, #64	@ 0x40
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	601a      	str	r2, [r3, #0]
    free_task_ptr->top_of_stack[1] = 0x01010101; // r1 (디버깅용 dummy)
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8000ddc:	601a      	str	r2, [r3, #0]
    free_task_ptr->top_of_stack[8] = (unsigned long)para;
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3320      	adds	r3, #32
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	601a      	str	r2, [r3, #0]
    free_task_ptr->top_of_stack[14] = (unsigned long)ptask_func;
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3338      	adds	r3, #56	@ 0x38
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	601a      	str	r2, [r3, #0]
    free_task_ptr->top_of_stack[15] = INIT_PSR;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	333c      	adds	r3, #60	@ 0x3c
 8000df8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000dfc:	601a      	str	r2, [r3, #0]
    _insert_ready_task(free_task_ptr->task_id);
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fdc9 	bl	800099c <_insert_ready_task>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f383 8811 	msr	BASEPRI, r3
}
 8000e14:	bf00      	nop

    enable_interrupts();
    return free_task_ptr->task_id;
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	b2db      	uxtb	r3, r3
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <update_delayed_tasks>:

void update_delayed_tasks(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f383 8811 	msr	BASEPRI, r3
}
 8000e34:	bf00      	nop
    disable_interrupts();

    const uint32_t cur_tick = HAL_GetTick();
 8000e36:	f000 fbc7 	bl	80015c8 <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

    ST_Task *cur_task = delay_task_pool.head;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <update_delayed_tasks+0x7c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	617b      	str	r3, [r7, #20]
    ST_Task *next_task = cur_task->next;
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	60fb      	str	r3, [r7, #12]

    while (cur_task != nullptr)
 8000e48:	e01d      	b.n	8000e86 <update_delayed_tasks+0x62>
    {
        next_task = cur_task->next;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	60fb      	str	r3, [r7, #12]

        if (cur_task->task_timeout <= cur_tick)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d313      	bcc.n	8000e82 <update_delayed_tasks+0x5e>
        {
            cur_task->state = TASK_READY;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2020 	strb.w	r2, [r3, #32]
            cur_task->blocked_reason = BLOCKED_NONE;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            _delete_delay_task(cur_task->task_id);
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fe67 	bl	8000b44 <_delete_delay_task>
            _insert_ready_task(cur_task->task_id);
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fd8d 	bl	800099c <_insert_ready_task>
        }

        cur_task = next_task;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	617b      	str	r3, [r7, #20]
    while (cur_task != nullptr)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1de      	bne.n	8000e4a <update_delayed_tasks+0x26>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f383 8811 	msr	BASEPRI, r3
}
 8000e96:	bf00      	nop
    }

    enable_interrupts();
}
 8000e98:	bf00      	nop
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000021c 	.word	0x2000021c

08000ea4 <delay_task>:

void delay_task(const uint32_t timeout)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	2310      	movs	r3, #16
 8000eae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	f383 8811 	msr	BASEPRI, r3
}
 8000eb6:	bf00      	nop
    disable_interrupts();

    current_task_ptr->state = TASK_BLOCKED;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <delay_task+0x74>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	f883 2020 	strb.w	r2, [r3, #32]
    current_task_ptr->blocked_reason = BLOCKED_SLEEP;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <delay_task+0x74>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    current_task_ptr->task_timeout = HAL_GetTick() + timeout;
 8000ecc:	f000 fb7c 	bl	80015c8 <HAL_GetTick>
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <delay_task+0x74>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	440a      	add	r2, r1
 8000eda:	611a      	str	r2, [r3, #16]

    _delete_ready_task(current_task_ptr->task_id);
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <delay_task+0x74>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fd97 	bl	8000a18 <_delete_ready_task>
    _insert_delay_task(current_task_ptr->task_id);
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <delay_task+0x74>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fdf2 	bl	8000adc <_insert_delay_task>

    trigger_context_switch();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <delay_task+0x78>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <delay_task+0x78>)
 8000efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f02:	6053      	str	r3, [r2, #4]
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f383 8811 	msr	BASEPRI, r3
}
 8000f0e:	bf00      	nop

    enable_interrupts();
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200001e8 	.word	0x200001e8
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <blocked_cur_task>:

void blocked_cur_task(const E_TaskBlockedReason blocked_reason, const uint32_t timeout)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
    current_task_ptr->state = TASK_BLOCKED;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <blocked_cur_task+0x54>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2202      	movs	r2, #2
 8000f32:	f883 2020 	strb.w	r2, [r3, #32]
    current_task_ptr->blocked_reason = blocked_reason;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <blocked_cur_task+0x54>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	79fa      	ldrb	r2, [r7, #7]
 8000f3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    current_task_ptr->task_timeout = HAL_GetTick() + timeout;
 8000f40:	f000 fb42 	bl	80015c8 <HAL_GetTick>
 8000f44:	4601      	mov	r1, r0
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <blocked_cur_task+0x54>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	440a      	add	r2, r1
 8000f4e:	611a      	str	r2, [r3, #16]

    _delete_ready_task(current_task_ptr->task_id);
 8000f50:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <blocked_cur_task+0x54>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fd5d 	bl	8000a18 <_delete_ready_task>
    _insert_delay_task(current_task_ptr->task_id);
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <blocked_cur_task+0x54>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fdb8 	bl	8000adc <_insert_delay_task>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200001e8 	.word	0x200001e8

08000f78 <wait_signal>:

uint8_t wait_signal(uint32_t *pdata, const uint32_t timeout)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	2310      	movs	r3, #16
 8000f84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f383 8811 	msr	BASEPRI, r3
}
 8000f8c:	bf00      	nop
    E_TaskBlockedReason initial_blocked_reason;

    disable_interrupts();
    blocked_cur_task(BLOCKED_WAIT_SIGNAL, timeout);
 8000f8e:	6839      	ldr	r1, [r7, #0]
 8000f90:	2002      	movs	r0, #2
 8000f92:	f7ff ffc5 	bl	8000f20 <blocked_cur_task>
    trigger_context_switch();
 8000f96:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <wait_signal+0x70>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	4a13      	ldr	r2, [pc, #76]	@ (8000fe8 <wait_signal+0x70>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	6053      	str	r3, [r2, #4]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	f383 8811 	msr	BASEPRI, r3
}
 8000fac:	bf00      	nop
    enable_interrupts();

    initial_blocked_reason = current_task_ptr->blocked_reason;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <wait_signal+0x74>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fb6:	75fb      	strb	r3, [r7, #23]
    current_task_ptr->blocked_reason = BLOCKED_NONE;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <wait_signal+0x74>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    *pdata = current_task_ptr->received_signal;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <wait_signal+0x74>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	695a      	ldr	r2, [r3, #20]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	601a      	str	r2, [r3, #0]

    return (initial_blocked_reason == current_task_ptr->blocked_reason);
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <wait_signal+0x74>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fd4:	7dfa      	ldrb	r2, [r7, #23]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	bf0c      	ite	eq
 8000fda:	2301      	moveq	r3, #1
 8000fdc:	2300      	movne	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	e000ed00 	.word	0xe000ed00
 8000fec:	200001e8 	.word	0x200001e8

08000ff0 <send_signal>:

void send_signal(const uint8_t dest_task_id, const uint32_t signal)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	f383 8811 	msr	BASEPRI, r3
}
 8001006:	bf00      	nop
    disable_interrupts();

    ST_Task *pdest_task = &task_pool[dest_task_id];
 8001008:	79fa      	ldrb	r2, [r7, #7]
 800100a:	4613      	mov	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	4413      	add	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4a18      	ldr	r2, [pc, #96]	@ (8001074 <send_signal+0x84>)
 8001014:	4413      	add	r3, r2
 8001016:	617b      	str	r3, [r7, #20]

    if (pdest_task->state == TASK_BLOCKED && pdest_task->blocked_reason == BLOCKED_WAIT_SIGNAL)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d11d      	bne.n	800105e <send_signal+0x6e>
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001028:	2b02      	cmp	r3, #2
 800102a:	d118      	bne.n	800105e <send_signal+0x6e>
    {
        pdest_task->received_signal = signal;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	615a      	str	r2, [r3, #20]
        pdest_task->state = TASK_READY;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]
        pdest_task->blocked_reason = BLOCKED_NONE;
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        _delete_delay_task(dest_task_id);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fd7d 	bl	8000b44 <_delete_delay_task>
        _insert_ready_task(dest_task_id);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fca5 	bl	800099c <_insert_ready_task>

        trigger_context_switch();
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <send_signal+0x88>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <send_signal+0x88>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800105c:	6053      	str	r3, [r2, #4]
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f383 8811 	msr	BASEPRI, r3
}
 8001068:	bf00      	nop
    }

    enable_interrupts();
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000080 	.word	0x20000080
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	4a0f      	ldr	r2, [pc, #60]	@ (80010c8 <HAL_MspInit+0x4c>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001090:	6453      	str	r3, [r2, #68]	@ 0x44
 8001092:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	4a08      	ldr	r2, [pc, #32]	@ (80010c8 <HAL_MspInit+0x4c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ba:	2007      	movs	r0, #7
 80010bc:	f000 fb60 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800

080010cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a19      	ldr	r2, [pc, #100]	@ (8001150 <HAL_UART_MspInit+0x84>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d12b      	bne.n	8001146 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_UART_MspInit+0x88>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	4a17      	ldr	r2, [pc, #92]	@ (8001154 <HAL_UART_MspInit+0x88>)
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_UART_MspInit+0x88>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <HAL_UART_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a10      	ldr	r2, [pc, #64]	@ (8001154 <HAL_UART_MspInit+0x88>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <HAL_UART_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001126:	230c      	movs	r3, #12
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001136:	2307      	movs	r3, #7
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <HAL_UART_MspInit+0x8c>)
 8001142:	f000 fb5f 	bl	8001804 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	@ 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40004400 	.word	0x40004400
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000

0800115c <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <NMI_Handler+0x4>

08001164 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <MemManage_Handler+0x4>

08001174 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <UsageFault_Handler+0x4>

08001184 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
__WEAK void SVC_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
    __asm volatile("cpsid i\n"
 8001188:	b672      	cpsid	i
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <SVC_Handler+0x28>)
 800118c:	6819      	ldr	r1, [r3, #0]
 800118e:	6808      	ldr	r0, [r1, #0]
 8001190:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001194:	f380 8809 	msr	PSP, r0
 8001198:	f04e 0e0d 	orr.w	lr, lr, #13
 800119c:	b662      	cpsie	i
 800119e:	4770      	bx	lr
                   "ldmia r0!, {r4-r11}\n"
                   "msr psp, r0\n"
                   "orr lr, #0xd\n" // Thread 모드에서 복귀
                   "cpsie i\n"      // 인터럽트 활성화
                   "bx lr\n");
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	0000      	.short	0x0000
 80011ac:	200001e8 	.word	0x200001e8

080011b0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	2310      	movs	r3, #16
 80011c8:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f383 8811 	msr	BASEPRI, r3
}
 80011d0:	bf00      	nop
    /* USER CODE BEGIN SysTick_IRQn 0 */
    disable_interrupts();

    HAL_IncTick();
 80011d2:	f000 f9e5 	bl	80015a0 <HAL_IncTick>
    update_delayed_tasks();
 80011d6:	f7ff fe25 	bl	8000e24 <update_delayed_tasks>

    trigger_context_switch();
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <SysTick_Handler+0x3c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <SysTick_Handler+0x3c>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e4:	6053      	str	r3, [r2, #4]
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f383 8811 	msr	BASEPRI, r3
}
 80011f0:	bf00      	nop

    /* USER CODE END SysTick_IRQn 0 */

    /* USER CODE BEGIN SysTick_IRQn 1 */
    /* USER CODE END SysTick_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <EXTI2_IRQHandler>:

extern uint8_t task3_id;

// Interrupt handler for SW1 (PD2)
void EXTI2_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_2) != RESET)
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <EXTI2_IRQHandler+0x34>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00f      	beq.n	8001230 <EXTI2_IRQHandler+0x30>
    {
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <EXTI2_IRQHandler+0x34>)
 8001212:	2204      	movs	r2, #4
 8001214:	615a      	str	r2, [r3, #20]

        // Check if the button is pressed (LOW due to pull-up)
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_SET)
 8001216:	2104      	movs	r1, #4
 8001218:	4807      	ldr	r0, [pc, #28]	@ (8001238 <EXTI2_IRQHandler+0x38>)
 800121a:	f000 fc87 	bl	8001b2c <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d105      	bne.n	8001230 <EXTI2_IRQHandler+0x30>
        {
            // Send a signal to the LED3 task
            send_signal(task3_id, 1); // Or any signal value you want to send
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <EXTI2_IRQHandler+0x3c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2101      	movs	r1, #1
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fee0 	bl	8000ff0 <send_signal>
        }
    }
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40013c00 	.word	0x40013c00
 8001238:	40020c00 	.word	0x40020c00
 800123c:	2000007e 	.word	0x2000007e

08001240 <EXTI4_IRQHandler>:

// Interrupt handler for SW2 (PA4)
void EXTI4_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <EXTI4_IRQHandler+0x34>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00f      	beq.n	8001270 <EXTI4_IRQHandler+0x30>
    {
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <EXTI4_IRQHandler+0x34>)
 8001252:	2210      	movs	r2, #16
 8001254:	615a      	str	r2, [r3, #20]

        // Check if the button is pressed (LOW due to pull-up)
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
 8001256:	2110      	movs	r1, #16
 8001258:	4807      	ldr	r0, [pc, #28]	@ (8001278 <EXTI4_IRQHandler+0x38>)
 800125a:	f000 fc67 	bl	8001b2c <HAL_GPIO_ReadPin>
 800125e:	4603      	mov	r3, r0
 8001260:	2b01      	cmp	r3, #1
 8001262:	d105      	bne.n	8001270 <EXTI4_IRQHandler+0x30>
        {
            // Send a signal to the LED3 task
            send_signal(task3_id, 2); // Or any signal value you want to send
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <EXTI4_IRQHandler+0x3c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2102      	movs	r1, #2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fec0 	bl	8000ff0 <send_signal>
        }
    }
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40013c00 	.word	0x40013c00
 8001278:	40020000 	.word	0x40020000
 800127c:	2000007e 	.word	0x2000007e

08001280 <switch_pin_init>:

// Configure external interrupts for the switches
void switch_pin_init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

    // Enable clock for GPIOD and GPIOA
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b2b      	ldr	r3, [pc, #172]	@ (8001348 <switch_pin_init+0xc8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a2a      	ldr	r2, [pc, #168]	@ (8001348 <switch_pin_init+0xc8>)
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <switch_pin_init+0xc8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <switch_pin_init+0xc8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a23      	ldr	r2, [pc, #140]	@ (8001348 <switch_pin_init+0xc8>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <switch_pin_init+0xc8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <switch_pin_init+0xc8>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001348 <switch_pin_init+0xc8>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012de:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <switch_pin_init+0xc8>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]

    // SW1 (PD2)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ea:	2304      	movs	r3, #4
 80012ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; // Trigger on falling edge (button press)
 80012ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4619      	mov	r1, r3
 80012fe:	4813      	ldr	r0, [pc, #76]	@ (800134c <switch_pin_init+0xcc>)
 8001300:	f000 fa80 	bl	8001804 <HAL_GPIO_Init>

    // SW2 (PA4)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001304:	2310      	movs	r3, #16
 8001306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001308:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800130c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130e:	2301      	movs	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4619      	mov	r1, r3
 8001318:	480d      	ldr	r0, [pc, #52]	@ (8001350 <switch_pin_init+0xd0>)
 800131a:	f000 fa73 	bl	8001804 <HAL_GPIO_Init>

    // Enable and set EXTI interrupts to the lowest priority
    HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2105      	movs	r1, #5
 8001322:	2008      	movs	r0, #8
 8001324:	f000 fa37 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001328:	2008      	movs	r0, #8
 800132a:	f000 fa50 	bl	80017ce <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2105      	movs	r1, #5
 8001332:	200a      	movs	r0, #10
 8001334:	f000 fa2f 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001338:	200a      	movs	r0, #10
 800133a:	f000 fa48 	bl	80017ce <HAL_NVIC_EnableIRQ>
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40020000 	.word	0x40020000

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <SystemInit+0x20>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <SystemInit+0x20>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <idle_task_func>:
#include "task.h"
#include "os.h"
#include "stm32f4xx_it.h"

void idle_task_func(void *param)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <idle_task_func+0x8>

08001384 <led1_task_func>:
        ;
    }
}

void led1_task_func(void *param)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    static uint8_t flag = 1;

    while (1)
    {
        if (flag)
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <led1_task_func+0x48>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <led1_task_func+0x1e>
        {
            led_on(NUM_LED3);
 8001394:	200e      	movs	r0, #14
 8001396:	f7ff f921 	bl	80005dc <led_on>
            led_on(NUM_LED4);
 800139a:	200f      	movs	r0, #15
 800139c:	f7ff f91e 	bl	80005dc <led_on>
 80013a0:	e005      	b.n	80013ae <led1_task_func+0x2a>
        }
        else
        {
            led_off(NUM_LED3);
 80013a2:	200e      	movs	r0, #14
 80013a4:	f7ff f94c 	bl	8000640 <led_off>
            led_off(NUM_LED4);
 80013a8:	200f      	movs	r0, #15
 80013aa:	f7ff f949 	bl	8000640 <led_off>
        }

        flag = !flag;
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <led1_task_func+0x48>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bf0c      	ite	eq
 80013b6:	2301      	moveq	r3, #1
 80013b8:	2300      	movne	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <led1_task_func+0x48>)
 80013c0:	701a      	strb	r2, [r3, #0]
        delay_task(1000);
 80013c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013c6:	f7ff fd6d 	bl	8000ea4 <delay_task>
        if (flag)
 80013ca:	e7df      	b.n	800138c <led1_task_func+0x8>
 80013cc:	2000000c 	.word	0x2000000c

080013d0 <led2_task_func>:
    }
}

void led2_task_func(void *param)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    static uint8_t flag;

    while (1)
    {
        if (flag)
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <led2_task_func+0x48>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <led2_task_func+0x1e>
        {
            led_on(NUM_LED1);
 80013e0:	200c      	movs	r0, #12
 80013e2:	f7ff f8fb 	bl	80005dc <led_on>
            led_on(NUM_LED2);
 80013e6:	200d      	movs	r0, #13
 80013e8:	f7ff f8f8 	bl	80005dc <led_on>
 80013ec:	e005      	b.n	80013fa <led2_task_func+0x2a>
        }
        else
        {
            led_off(NUM_LED1);
 80013ee:	200c      	movs	r0, #12
 80013f0:	f7ff f926 	bl	8000640 <led_off>
            led_off(NUM_LED2);
 80013f4:	200d      	movs	r0, #13
 80013f6:	f7ff f923 	bl	8000640 <led_off>
        }

        flag = !flag;
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <led2_task_func+0x48>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bf0c      	ite	eq
 8001402:	2301      	moveq	r3, #1
 8001404:	2300      	movne	r3, #0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <led2_task_func+0x48>)
 800140c:	701a      	strb	r2, [r3, #0]
        delay_task(1000);
 800140e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001412:	f7ff fd47 	bl	8000ea4 <delay_task>
        if (flag)
 8001416:	e7df      	b.n	80013d8 <led2_task_func+0x8>
 8001418:	20002220 	.word	0x20002220

0800141c <led3_task_func>:
    }
}
void led3_task_func(void *param)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    uint32_t signal = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
    static uint8_t sw1_flag; // Flag for SW1 (NUM_LED5)
    static uint8_t sw2_flag; // Flag for SW2 (NUM_LED6)

    while (1)
    {
        if (wait_signal(&signal, 5000))
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fda1 	bl	8000f78 <wait_signal>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d019      	beq.n	8001470 <led3_task_func+0x54>
        {
            if (signal == 1) // SW1 pressed
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d109      	bne.n	8001456 <led3_task_func+0x3a>
            {
                sw1_flag = !sw1_flag;
 8001442:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <led3_task_func+0x84>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	bf0c      	ite	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	2300      	movne	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <led3_task_func+0x84>)
 8001454:	701a      	strb	r2, [r3, #0]
            }
            if (signal == 2) // SW2 pressed
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d109      	bne.n	8001470 <led3_task_func+0x54>
            {
                sw2_flag = !sw2_flag;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <led3_task_func+0x88>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <led3_task_func+0x88>)
 800146e:	701a      	strb	r2, [r3, #0]
        else
        {
            // timeout occurred, add code here if you want to change led states on timeout.
        }

        if (sw1_flag)
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <led3_task_func+0x84>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <led3_task_func+0x64>
        {
            led_on(NUM_LED5);
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff f8af 	bl	80005dc <led_on>
 800147e:	e002      	b.n	8001486 <led3_task_func+0x6a>
        }
        else
        {
            led_off(NUM_LED5);
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff f8dd 	bl	8000640 <led_off>
        }

        if (sw2_flag)
 8001486:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <led3_task_func+0x88>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <led3_task_func+0x7a>
        {
            led_on(NUM_LED6);
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff f8a4 	bl	80005dc <led_on>
 8001494:	e7c8      	b.n	8001428 <led3_task_func+0xc>
        }
        else
        {
            led_off(NUM_LED6);
 8001496:	2001      	movs	r0, #1
 8001498:	f7ff f8d2 	bl	8000640 <led_off>
        if (wait_signal(&signal, 5000))
 800149c:	e7c4      	b.n	8001428 <led3_task_func+0xc>
 800149e:	bf00      	nop
 80014a0:	20002221 	.word	0x20002221
 80014a4:	20002222 	.word	0x20002222

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014ac:	f7ff ff52 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	@ (80014e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	@ (80014ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	@ (80014f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f001 fc0f 	bl	8002cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff f8e7 	bl	80006ac <main>
  bx  lr    
 80014de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80014ec:	08002d80 	.word	0x08002d80
  ldr r2, =_sbss
 80014f0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80014f4:	20002228 	.word	0x20002228

080014f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001500:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <HAL_Init+0x40>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800150a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <HAL_Init+0x40>)
 8001512:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a07      	ldr	r2, [pc, #28]	@ (800153c <HAL_Init+0x40>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 f92b 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f808 	bl	8001540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001530:	f7ff fda4 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023c00 	.word	0x40023c00

08001540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <HAL_InitTick+0x54>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_InitTick+0x58>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001556:	fbb3 f3f1 	udiv	r3, r3, r1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f943 	bl	80017ea <HAL_SYSTICK_Config>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e00e      	b.n	800158c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b0f      	cmp	r3, #15
 8001572:	d80a      	bhi.n	800158a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001574:	2200      	movs	r2, #0
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800157c:	f000 f90b 	bl	8001796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001580:	4a06      	ldr	r2, [pc, #24]	@ (800159c <HAL_InitTick+0x5c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	e000      	b.n	800158c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000008 	.word	0x20000008
 8001598:	20000014 	.word	0x20000014
 800159c:	20000010 	.word	0x20000010

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_IncTick+0x20>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_IncTick+0x24>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a04      	ldr	r2, [pc, #16]	@ (80015c4 <HAL_IncTick+0x24>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000014 	.word	0x20000014
 80015c4:	20002224 	.word	0x20002224

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20002224 	.word	0x20002224

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	@ (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	@ (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	@ (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	@ 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	@ 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001760:	f7ff ff8e 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	@ (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff29 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff3e 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff8e 	bl	80016d4 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5d 	bl	8001680 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff31 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffa2 	bl	800173c <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	@ 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	e165      	b.n	8001aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 8154 	bne.w	8001ae6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d005      	beq.n	8001856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001852:	2b02      	cmp	r3, #2
 8001854:	d130      	bne.n	80018b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 0201 	and.w	r2, r3, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d017      	beq.n	80018f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d123      	bne.n	8001948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3208      	adds	r2, #8
 8001908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	69b9      	ldr	r1, [r7, #24]
 8001944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0203 	and.w	r2, r3, #3
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80ae 	beq.w	8001ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b04 <HAL_GPIO_Init+0x300>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	4a5c      	ldr	r2, [pc, #368]	@ (8001b04 <HAL_GPIO_Init+0x300>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001998:	6453      	str	r3, [r2, #68]	@ 0x44
 800199a:	4b5a      	ldr	r3, [pc, #360]	@ (8001b04 <HAL_GPIO_Init+0x300>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a6:	4a58      	ldr	r2, [pc, #352]	@ (8001b08 <HAL_GPIO_Init+0x304>)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4f      	ldr	r2, [pc, #316]	@ (8001b0c <HAL_GPIO_Init+0x308>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d025      	beq.n	8001a1e <HAL_GPIO_Init+0x21a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001b10 <HAL_GPIO_Init+0x30c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d01f      	beq.n	8001a1a <HAL_GPIO_Init+0x216>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001b14 <HAL_GPIO_Init+0x310>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d019      	beq.n	8001a16 <HAL_GPIO_Init+0x212>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001b18 <HAL_GPIO_Init+0x314>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0x20e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4b      	ldr	r2, [pc, #300]	@ (8001b1c <HAL_GPIO_Init+0x318>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00d      	beq.n	8001a0e <HAL_GPIO_Init+0x20a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001b20 <HAL_GPIO_Init+0x31c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_Init+0x206>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a49      	ldr	r2, [pc, #292]	@ (8001b24 <HAL_GPIO_Init+0x320>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_GPIO_Init+0x202>
 8001a02:	2306      	movs	r3, #6
 8001a04:	e00c      	b.n	8001a20 <HAL_GPIO_Init+0x21c>
 8001a06:	2307      	movs	r3, #7
 8001a08:	e00a      	b.n	8001a20 <HAL_GPIO_Init+0x21c>
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	e008      	b.n	8001a20 <HAL_GPIO_Init+0x21c>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x21c>
 8001a12:	2303      	movs	r3, #3
 8001a14:	e004      	b.n	8001a20 <HAL_GPIO_Init+0x21c>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e002      	b.n	8001a20 <HAL_GPIO_Init+0x21c>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x21c>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	f002 0203 	and.w	r2, r2, #3
 8001a26:	0092      	lsls	r2, r2, #2
 8001a28:	4093      	lsls	r3, r2
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a30:	4935      	ldr	r1, [pc, #212]	@ (8001b08 <HAL_GPIO_Init+0x304>)
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <HAL_GPIO_Init+0x324>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a62:	4a31      	ldr	r2, [pc, #196]	@ (8001b28 <HAL_GPIO_Init+0x324>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a68:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <HAL_GPIO_Init+0x324>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a8c:	4a26      	ldr	r2, [pc, #152]	@ (8001b28 <HAL_GPIO_Init+0x324>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a92:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <HAL_GPIO_Init+0x324>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b28 <HAL_GPIO_Init+0x324>)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001abc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <HAL_GPIO_Init+0x324>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae0:	4a11      	ldr	r2, [pc, #68]	@ (8001b28 <HAL_GPIO_Init+0x324>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b0f      	cmp	r3, #15
 8001af0:	f67f ae96 	bls.w	8001820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3724      	adds	r7, #36	@ 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40013800 	.word	0x40013800
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40020400 	.word	0x40020400
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020c00 	.word	0x40020c00
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40021400 	.word	0x40021400
 8001b24:	40021800 	.word	0x40021800
 8001b28:	40013c00 	.word	0x40013c00

08001b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e001      	b.n	8001b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b6c:	787b      	ldrb	r3, [r7, #1]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b78:	e003      	b.n	8001b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	041a      	lsls	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	619a      	str	r2, [r3, #24]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0cc      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b68      	ldr	r3, [pc, #416]	@ (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d90c      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b65      	ldr	r3, [pc, #404]	@ (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b63      	ldr	r3, [pc, #396]	@ (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b8      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be4:	4b59      	ldr	r3, [pc, #356]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4a58      	ldr	r2, [pc, #352]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bfc:	4b53      	ldr	r3, [pc, #332]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a52      	ldr	r2, [pc, #328]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b50      	ldr	r3, [pc, #320]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	494d      	ldr	r1, [pc, #308]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d044      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b47      	ldr	r3, [pc, #284]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d119      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e07f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e06f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e067      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6e:	4b37      	ldr	r3, [pc, #220]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f023 0203 	bic.w	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4934      	ldr	r1, [pc, #208]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c80:	f7ff fca2 	bl	80015c8 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c88:	f7ff fc9e 	bl	80015c8 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e04f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 020c 	and.w	r2, r3, #12
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1eb      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d20c      	bcs.n	8001cd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b20      	ldr	r3, [pc, #128]	@ (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e032      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4916      	ldr	r1, [pc, #88]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	490e      	ldr	r1, [pc, #56]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d16:	f000 f855 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	490a      	ldr	r1, [pc, #40]	@ (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	4a09      	ldr	r2, [pc, #36]	@ (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fc02 	bl	8001540 <HAL_InitTick>

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	08002d58 	.word	0x08002d58
 8001d54:	20000008 	.word	0x20000008
 8001d58:	20000010 	.word	0x20000010

08001d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d60:	4b03      	ldr	r3, [pc, #12]	@ (8001d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000008 	.word	0x20000008

08001d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d78:	f7ff fff0 	bl	8001d5c <HAL_RCC_GetHCLKFreq>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	0a9b      	lsrs	r3, r3, #10
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4903      	ldr	r1, [pc, #12]	@ (8001d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40023800 	.word	0x40023800
 8001d98:	08002d68 	.word	0x08002d68

08001d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da0:	f7ff ffdc 	bl	8001d5c <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0b5b      	lsrs	r3, r3, #13
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4903      	ldr	r1, [pc, #12]	@ (8001dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	08002d68 	.word	0x08002d68

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc8:	b0ae      	sub	sp, #184	@ 0xb8
 8001dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dea:	4bcb      	ldr	r3, [pc, #812]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	f200 8206 	bhi.w	8002204 <HAL_RCC_GetSysClockFreq+0x440>
 8001df8:	a201      	add	r2, pc, #4	@ (adr r2, 8001e00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e35 	.word	0x08001e35
 8001e04:	08002205 	.word	0x08002205
 8001e08:	08002205 	.word	0x08002205
 8001e0c:	08002205 	.word	0x08002205
 8001e10:	08001e3d 	.word	0x08001e3d
 8001e14:	08002205 	.word	0x08002205
 8001e18:	08002205 	.word	0x08002205
 8001e1c:	08002205 	.word	0x08002205
 8001e20:	08001e45 	.word	0x08001e45
 8001e24:	08002205 	.word	0x08002205
 8001e28:	08002205 	.word	0x08002205
 8001e2c:	08002205 	.word	0x08002205
 8001e30:	08002035 	.word	0x08002035
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4bb9      	ldr	r3, [pc, #740]	@ (800211c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e3a:	e1e7      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e3c:	4bb8      	ldr	r3, [pc, #736]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e42:	e1e3      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e44:	4bb4      	ldr	r3, [pc, #720]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e50:	4bb1      	ldr	r3, [pc, #708]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d071      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5c:	4bae      	ldr	r3, [pc, #696]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	099b      	lsrs	r3, r3, #6
 8001e62:	2200      	movs	r2, #0
 8001e64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e68:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e82:	4622      	mov	r2, r4
 8001e84:	462b      	mov	r3, r5
 8001e86:	f04f 0000 	mov.w	r0, #0
 8001e8a:	f04f 0100 	mov.w	r1, #0
 8001e8e:	0159      	lsls	r1, r3, #5
 8001e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e94:	0150      	lsls	r0, r2, #5
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	1a51      	subs	r1, r2, r1
 8001e9e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ea6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001eb4:	4649      	mov	r1, r9
 8001eb6:	018b      	lsls	r3, r1, #6
 8001eb8:	4641      	mov	r1, r8
 8001eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ebe:	4641      	mov	r1, r8
 8001ec0:	018a      	lsls	r2, r1, #6
 8001ec2:	4641      	mov	r1, r8
 8001ec4:	1a51      	subs	r1, r2, r1
 8001ec6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ec8:	4649      	mov	r1, r9
 8001eca:	eb63 0301 	sbc.w	r3, r3, r1
 8001ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001edc:	4649      	mov	r1, r9
 8001ede:	00cb      	lsls	r3, r1, #3
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ee6:	4641      	mov	r1, r8
 8001ee8:	00ca      	lsls	r2, r1, #3
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4622      	mov	r2, r4
 8001ef2:	189b      	adds	r3, r3, r2
 8001ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ef6:	462b      	mov	r3, r5
 8001ef8:	460a      	mov	r2, r1
 8001efa:	eb42 0303 	adc.w	r3, r2, r3
 8001efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	024b      	lsls	r3, r1, #9
 8001f10:	4621      	mov	r1, r4
 8001f12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f16:	4621      	mov	r1, r4
 8001f18:	024a      	lsls	r2, r1, #9
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f22:	2200      	movs	r2, #0
 8001f24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f30:	f7fe f986 	bl	8000240 <__aeabi_uldivmod>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4613      	mov	r3, r2
 8001f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f3e:	e067      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f40:	4b75      	ldr	r3, [pc, #468]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	2200      	movs	r2, #0
 8001f48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f4c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001f62:	4622      	mov	r2, r4
 8001f64:	462b      	mov	r3, r5
 8001f66:	f04f 0000 	mov.w	r0, #0
 8001f6a:	f04f 0100 	mov.w	r1, #0
 8001f6e:	0159      	lsls	r1, r3, #5
 8001f70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f74:	0150      	lsls	r0, r2, #5
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	1a51      	subs	r1, r2, r1
 8001f7e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f80:	4629      	mov	r1, r5
 8001f82:	eb63 0301 	sbc.w	r3, r3, r1
 8001f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001f94:	4649      	mov	r1, r9
 8001f96:	018b      	lsls	r3, r1, #6
 8001f98:	4641      	mov	r1, r8
 8001f9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f9e:	4641      	mov	r1, r8
 8001fa0:	018a      	lsls	r2, r1, #6
 8001fa2:	4641      	mov	r1, r8
 8001fa4:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fa8:	4649      	mov	r1, r9
 8001faa:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fc2:	4692      	mov	sl, r2
 8001fc4:	469b      	mov	fp, r3
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	eb1a 0303 	adds.w	r3, sl, r3
 8001fcc:	623b      	str	r3, [r7, #32]
 8001fce:	462b      	mov	r3, r5
 8001fd0:	eb4b 0303 	adc.w	r3, fp, r3
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fe2:	4629      	mov	r1, r5
 8001fe4:	028b      	lsls	r3, r1, #10
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fec:	4621      	mov	r1, r4
 8001fee:	028a      	lsls	r2, r1, #10
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ffc:	677a      	str	r2, [r7, #116]	@ 0x74
 8001ffe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002002:	f7fe f91d 	bl	8000240 <__aeabi_uldivmod>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4613      	mov	r3, r2
 800200c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002010:	4b41      	ldr	r3, [pc, #260]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x354>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	0c1b      	lsrs	r3, r3, #16
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	3301      	adds	r3, #1
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002026:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002032:	e0eb      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002034:	4b38      	ldr	r3, [pc, #224]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x354>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800203c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002040:	4b35      	ldr	r3, [pc, #212]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x354>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d06b      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204c:	4b32      	ldr	r3, [pc, #200]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x354>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	2200      	movs	r2, #0
 8002054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002056:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002058:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800205a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002060:	2300      	movs	r3, #0
 8002062:	667b      	str	r3, [r7, #100]	@ 0x64
 8002064:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002068:	4622      	mov	r2, r4
 800206a:	462b      	mov	r3, r5
 800206c:	f04f 0000 	mov.w	r0, #0
 8002070:	f04f 0100 	mov.w	r1, #0
 8002074:	0159      	lsls	r1, r3, #5
 8002076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800207a:	0150      	lsls	r0, r2, #5
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4621      	mov	r1, r4
 8002082:	1a51      	subs	r1, r2, r1
 8002084:	61b9      	str	r1, [r7, #24]
 8002086:	4629      	mov	r1, r5
 8002088:	eb63 0301 	sbc.w	r3, r3, r1
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800209a:	4659      	mov	r1, fp
 800209c:	018b      	lsls	r3, r1, #6
 800209e:	4651      	mov	r1, sl
 80020a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020a4:	4651      	mov	r1, sl
 80020a6:	018a      	lsls	r2, r1, #6
 80020a8:	4651      	mov	r1, sl
 80020aa:	ebb2 0801 	subs.w	r8, r2, r1
 80020ae:	4659      	mov	r1, fp
 80020b0:	eb63 0901 	sbc.w	r9, r3, r1
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020c8:	4690      	mov	r8, r2
 80020ca:	4699      	mov	r9, r3
 80020cc:	4623      	mov	r3, r4
 80020ce:	eb18 0303 	adds.w	r3, r8, r3
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	462b      	mov	r3, r5
 80020d6:	eb49 0303 	adc.w	r3, r9, r3
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020e8:	4629      	mov	r1, r5
 80020ea:	024b      	lsls	r3, r1, #9
 80020ec:	4621      	mov	r1, r4
 80020ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020f2:	4621      	mov	r1, r4
 80020f4:	024a      	lsls	r2, r1, #9
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020fe:	2200      	movs	r2, #0
 8002100:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002102:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002104:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002108:	f7fe f89a 	bl	8000240 <__aeabi_uldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4613      	mov	r3, r2
 8002112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002116:	e065      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x420>
 8002118:	40023800 	.word	0x40023800
 800211c:	00f42400 	.word	0x00f42400
 8002120:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002124:	4b3d      	ldr	r3, [pc, #244]	@ (800221c <HAL_RCC_GetSysClockFreq+0x458>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	2200      	movs	r2, #0
 800212c:	4618      	mov	r0, r3
 800212e:	4611      	mov	r1, r2
 8002130:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002134:	653b      	str	r3, [r7, #80]	@ 0x50
 8002136:	2300      	movs	r3, #0
 8002138:	657b      	str	r3, [r7, #84]	@ 0x54
 800213a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800213e:	4642      	mov	r2, r8
 8002140:	464b      	mov	r3, r9
 8002142:	f04f 0000 	mov.w	r0, #0
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	0159      	lsls	r1, r3, #5
 800214c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002150:	0150      	lsls	r0, r2, #5
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4641      	mov	r1, r8
 8002158:	1a51      	subs	r1, r2, r1
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	4649      	mov	r1, r9
 800215e:	eb63 0301 	sbc.w	r3, r3, r1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002170:	4659      	mov	r1, fp
 8002172:	018b      	lsls	r3, r1, #6
 8002174:	4651      	mov	r1, sl
 8002176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800217a:	4651      	mov	r1, sl
 800217c:	018a      	lsls	r2, r1, #6
 800217e:	4651      	mov	r1, sl
 8002180:	1a54      	subs	r4, r2, r1
 8002182:	4659      	mov	r1, fp
 8002184:	eb63 0501 	sbc.w	r5, r3, r1
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	00eb      	lsls	r3, r5, #3
 8002192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002196:	00e2      	lsls	r2, r4, #3
 8002198:	4614      	mov	r4, r2
 800219a:	461d      	mov	r5, r3
 800219c:	4643      	mov	r3, r8
 800219e:	18e3      	adds	r3, r4, r3
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	464b      	mov	r3, r9
 80021a4:	eb45 0303 	adc.w	r3, r5, r3
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021b6:	4629      	mov	r1, r5
 80021b8:	028b      	lsls	r3, r1, #10
 80021ba:	4621      	mov	r1, r4
 80021bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021c0:	4621      	mov	r1, r4
 80021c2:	028a      	lsls	r2, r1, #10
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021cc:	2200      	movs	r2, #0
 80021ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80021d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021d6:	f7fe f833 	bl	8000240 <__aeabi_uldivmod>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4613      	mov	r3, r2
 80021e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021e4:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <HAL_RCC_GetSysClockFreq+0x458>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	0f1b      	lsrs	r3, r3, #28
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80021f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002202:	e003      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002206:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800220a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002210:	4618      	mov	r0, r3
 8002212:	37b8      	adds	r7, #184	@ 0xb8
 8002214:	46bd      	mov	sp, r7
 8002216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	00f42400 	.word	0x00f42400

08002224 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e28d      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8083 	beq.w	800234a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002244:	4b94      	ldr	r3, [pc, #592]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b04      	cmp	r3, #4
 800224e:	d019      	beq.n	8002284 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002250:	4b91      	ldr	r3, [pc, #580]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
        || \
 8002258:	2b08      	cmp	r3, #8
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800225c:	4b8e      	ldr	r3, [pc, #568]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002264:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002268:	d00c      	beq.n	8002284 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800226a:	4b8b      	ldr	r3, [pc, #556]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d112      	bne.n	800229c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002276:	4b88      	ldr	r3, [pc, #544]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800227e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002282:	d10b      	bne.n	800229c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	4b84      	ldr	r3, [pc, #528]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d05b      	beq.n	8002348 <HAL_RCC_OscConfig+0x124>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d157      	bne.n	8002348 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e25a      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a4:	d106      	bne.n	80022b4 <HAL_RCC_OscConfig+0x90>
 80022a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a7b      	ldr	r2, [pc, #492]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e01d      	b.n	80022f0 <HAL_RCC_OscConfig+0xcc>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0xb4>
 80022be:	4b76      	ldr	r3, [pc, #472]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a75      	ldr	r2, [pc, #468]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80022c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b73      	ldr	r3, [pc, #460]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a72      	ldr	r2, [pc, #456]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0xcc>
 80022d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80022de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6b      	ldr	r2, [pc, #428]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80022ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7ff f966 	bl	80015c8 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002300:	f7ff f962 	bl	80015c8 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	@ 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e21f      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b61      	ldr	r3, [pc, #388]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0xdc>
 800231e:	e014      	b.n	800234a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff f952 	bl	80015c8 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff f94e 	bl	80015c8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	@ 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e20b      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233a:	4b57      	ldr	r3, [pc, #348]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x104>
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d06f      	beq.n	8002436 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002356:	4b50      	ldr	r3, [pc, #320]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b00      	cmp	r3, #0
 8002360:	d017      	beq.n	8002392 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002362:	4b4d      	ldr	r3, [pc, #308]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
        || \
 800236a:	2b08      	cmp	r3, #8
 800236c:	d105      	bne.n	800237a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800236e:	4b4a      	ldr	r3, [pc, #296]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237a:	4b47      	ldr	r3, [pc, #284]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002382:	2b0c      	cmp	r3, #12
 8002384:	d11c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002386:	4b44      	ldr	r3, [pc, #272]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	4b41      	ldr	r3, [pc, #260]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RCC_OscConfig+0x186>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e1d3      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4937      	ldr	r1, [pc, #220]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	e03a      	b.n	8002436 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c8:	4b34      	ldr	r3, [pc, #208]	@ (800249c <HAL_RCC_OscConfig+0x278>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7ff f8fb 	bl	80015c8 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d6:	f7ff f8f7 	bl	80015c8 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e1b4      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b28      	ldr	r3, [pc, #160]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4925      	ldr	r1, [pc, #148]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240a:	4b24      	ldr	r3, [pc, #144]	@ (800249c <HAL_RCC_OscConfig+0x278>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7ff f8da 	bl	80015c8 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002418:	f7ff f8d6 	bl	80015c8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e193      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d036      	beq.n	80024b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244a:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <HAL_RCC_OscConfig+0x27c>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7ff f8ba 	bl	80015c8 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7ff f8b6 	bl	80015c8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e173      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_RCC_OscConfig+0x274>)
 800246c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x234>
 8002476:	e01b      	b.n	80024b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002478:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_RCC_OscConfig+0x27c>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247e:	f7ff f8a3 	bl	80015c8 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	e00e      	b.n	80024a4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002486:	f7ff f89f 	bl	80015c8 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d907      	bls.n	80024a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e15c      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
 8002498:	40023800 	.word	0x40023800
 800249c:	42470000 	.word	0x42470000
 80024a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	4b8a      	ldr	r3, [pc, #552]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ea      	bne.n	8002486 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8097 	beq.w	80025ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c2:	4b83      	ldr	r3, [pc, #524]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	4b7f      	ldr	r3, [pc, #508]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	4a7e      	ldr	r2, [pc, #504]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024de:	4b7c      	ldr	r3, [pc, #496]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ea:	2301      	movs	r3, #1
 80024ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	4b79      	ldr	r3, [pc, #484]	@ (80026d4 <HAL_RCC_OscConfig+0x4b0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fa:	4b76      	ldr	r3, [pc, #472]	@ (80026d4 <HAL_RCC_OscConfig+0x4b0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a75      	ldr	r2, [pc, #468]	@ (80026d4 <HAL_RCC_OscConfig+0x4b0>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002506:	f7ff f85f 	bl	80015c8 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7ff f85b 	bl	80015c8 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e118      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	4b6c      	ldr	r3, [pc, #432]	@ (80026d4 <HAL_RCC_OscConfig+0x4b0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x31e>
 8002534:	4b66      	ldr	r3, [pc, #408]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002538:	4a65      	ldr	r2, [pc, #404]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002540:	e01c      	b.n	800257c <HAL_RCC_OscConfig+0x358>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b05      	cmp	r3, #5
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x340>
 800254a:	4b61      	ldr	r3, [pc, #388]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	4a60      	ldr	r2, [pc, #384]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6713      	str	r3, [r2, #112]	@ 0x70
 8002556:	4b5e      	ldr	r3, [pc, #376]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255a:	4a5d      	ldr	r2, [pc, #372]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6713      	str	r3, [r2, #112]	@ 0x70
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0x358>
 8002564:	4b5a      	ldr	r3, [pc, #360]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002568:	4a59      	ldr	r2, [pc, #356]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002570:	4b57      	ldr	r3, [pc, #348]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002574:	4a56      	ldr	r2, [pc, #344]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 8002576:	f023 0304 	bic.w	r3, r3, #4
 800257a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d015      	beq.n	80025b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7ff f820 	bl	80015c8 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f7ff f81c 	bl	80015c8 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0d7      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a2:	4b4b      	ldr	r3, [pc, #300]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0ee      	beq.n	800258c <HAL_RCC_OscConfig+0x368>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7ff f80a 	bl	80015c8 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7ff f806 	bl	80015c8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0c1      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ce:	4b40      	ldr	r3, [pc, #256]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ee      	bne.n	80025b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e0:	4b3b      	ldr	r3, [pc, #236]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	4a3a      	ldr	r2, [pc, #232]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 80025e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80ad 	beq.w	8002750 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f6:	4b36      	ldr	r3, [pc, #216]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d060      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d145      	bne.n	8002696 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b33      	ldr	r3, [pc, #204]	@ (80026d8 <HAL_RCC_OscConfig+0x4b4>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe ffda 	bl	80015c8 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe ffd6 	bl	80015c8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e093      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	019b      	lsls	r3, r3, #6
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	3b01      	subs	r3, #1
 8002650:	041b      	lsls	r3, r3, #16
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	071b      	lsls	r3, r3, #28
 8002662:	491b      	ldr	r1, [pc, #108]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002668:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <HAL_RCC_OscConfig+0x4b4>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe ffab 	bl	80015c8 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe ffa7 	bl	80015c8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e064      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x452>
 8002694:	e05c      	b.n	8002750 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <HAL_RCC_OscConfig+0x4b4>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe ff94 	bl	80015c8 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe ff90 	bl	80015c8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e04d      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <HAL_RCC_OscConfig+0x4ac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x480>
 80026c2:	e045      	b.n	8002750 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e040      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40007000 	.word	0x40007000
 80026d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026dc:	4b1f      	ldr	r3, [pc, #124]	@ (800275c <HAL_RCC_OscConfig+0x538>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d030      	beq.n	800274c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d129      	bne.n	800274c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d122      	bne.n	800274c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800270c:	4013      	ands	r3, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002712:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002714:	4293      	cmp	r3, r2
 8002716:	d119      	bne.n	800274c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	3b01      	subs	r3, #1
 8002726:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d10f      	bne.n	800274c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002736:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002738:	429a      	cmp	r2, r3
 800273a:	d107      	bne.n	800274c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800

08002760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e042      	b.n	80027f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fca0 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2224      	movs	r2, #36	@ 0x24
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f82b 	bl	8002800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002804:	b0c0      	sub	sp, #256	@ 0x100
 8002806:	af00      	add	r7, sp, #0
 8002808:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281c:	68d9      	ldr	r1, [r3, #12]
 800281e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	ea40 0301 	orr.w	r3, r0, r1
 8002828:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800282a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	431a      	orrs	r2, r3
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	431a      	orrs	r2, r3
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002858:	f021 010c 	bic.w	r1, r1, #12
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002866:	430b      	orrs	r3, r1
 8002868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800286a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287a:	6999      	ldr	r1, [r3, #24]
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	ea40 0301 	orr.w	r3, r0, r1
 8002886:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4b8f      	ldr	r3, [pc, #572]	@ (8002acc <UART_SetConfig+0x2cc>)
 8002890:	429a      	cmp	r2, r3
 8002892:	d005      	beq.n	80028a0 <UART_SetConfig+0xa0>
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ad0 <UART_SetConfig+0x2d0>)
 800289c:	429a      	cmp	r2, r3
 800289e:	d104      	bne.n	80028aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028a0:	f7ff fa7c 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 80028a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028a8:	e003      	b.n	80028b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028aa:	f7ff fa63 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 80028ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028bc:	f040 810c 	bne.w	8002ad8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028c4:	2200      	movs	r2, #0
 80028c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80028ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80028d2:	4622      	mov	r2, r4
 80028d4:	462b      	mov	r3, r5
 80028d6:	1891      	adds	r1, r2, r2
 80028d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80028da:	415b      	adcs	r3, r3
 80028dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028e2:	4621      	mov	r1, r4
 80028e4:	eb12 0801 	adds.w	r8, r2, r1
 80028e8:	4629      	mov	r1, r5
 80028ea:	eb43 0901 	adc.w	r9, r3, r1
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002902:	4690      	mov	r8, r2
 8002904:	4699      	mov	r9, r3
 8002906:	4623      	mov	r3, r4
 8002908:	eb18 0303 	adds.w	r3, r8, r3
 800290c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002910:	462b      	mov	r3, r5
 8002912:	eb49 0303 	adc.w	r3, r9, r3
 8002916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002926:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800292a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800292e:	460b      	mov	r3, r1
 8002930:	18db      	adds	r3, r3, r3
 8002932:	653b      	str	r3, [r7, #80]	@ 0x50
 8002934:	4613      	mov	r3, r2
 8002936:	eb42 0303 	adc.w	r3, r2, r3
 800293a:	657b      	str	r3, [r7, #84]	@ 0x54
 800293c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002940:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002944:	f7fd fc7c 	bl	8000240 <__aeabi_uldivmod>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4b61      	ldr	r3, [pc, #388]	@ (8002ad4 <UART_SetConfig+0x2d4>)
 800294e:	fba3 2302 	umull	r2, r3, r3, r2
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	011c      	lsls	r4, r3, #4
 8002956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800295a:	2200      	movs	r2, #0
 800295c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002960:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002964:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002968:	4642      	mov	r2, r8
 800296a:	464b      	mov	r3, r9
 800296c:	1891      	adds	r1, r2, r2
 800296e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002970:	415b      	adcs	r3, r3
 8002972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002974:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002978:	4641      	mov	r1, r8
 800297a:	eb12 0a01 	adds.w	sl, r2, r1
 800297e:	4649      	mov	r1, r9
 8002980:	eb43 0b01 	adc.w	fp, r3, r1
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002990:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002998:	4692      	mov	sl, r2
 800299a:	469b      	mov	fp, r3
 800299c:	4643      	mov	r3, r8
 800299e:	eb1a 0303 	adds.w	r3, sl, r3
 80029a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029a6:	464b      	mov	r3, r9
 80029a8:	eb4b 0303 	adc.w	r3, fp, r3
 80029ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80029c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80029c4:	460b      	mov	r3, r1
 80029c6:	18db      	adds	r3, r3, r3
 80029c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80029ca:	4613      	mov	r3, r2
 80029cc:	eb42 0303 	adc.w	r3, r2, r3
 80029d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80029d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80029d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80029da:	f7fd fc31 	bl	8000240 <__aeabi_uldivmod>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad4 <UART_SetConfig+0x2d4>)
 80029e6:	fba3 2301 	umull	r2, r3, r3, r1
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2264      	movs	r2, #100	@ 0x64
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	1acb      	subs	r3, r1, r3
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80029fa:	4b36      	ldr	r3, [pc, #216]	@ (8002ad4 <UART_SetConfig+0x2d4>)
 80029fc:	fba3 2302 	umull	r2, r3, r3, r2
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a08:	441c      	add	r4, r3
 8002a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a1c:	4642      	mov	r2, r8
 8002a1e:	464b      	mov	r3, r9
 8002a20:	1891      	adds	r1, r2, r2
 8002a22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a24:	415b      	adcs	r3, r3
 8002a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a2c:	4641      	mov	r1, r8
 8002a2e:	1851      	adds	r1, r2, r1
 8002a30:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a32:	4649      	mov	r1, r9
 8002a34:	414b      	adcs	r3, r1
 8002a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a44:	4659      	mov	r1, fp
 8002a46:	00cb      	lsls	r3, r1, #3
 8002a48:	4651      	mov	r1, sl
 8002a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a4e:	4651      	mov	r1, sl
 8002a50:	00ca      	lsls	r2, r1, #3
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	4642      	mov	r2, r8
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a60:	464b      	mov	r3, r9
 8002a62:	460a      	mov	r2, r1
 8002a64:	eb42 0303 	adc.w	r3, r2, r3
 8002a68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a80:	460b      	mov	r3, r1
 8002a82:	18db      	adds	r3, r3, r3
 8002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a86:	4613      	mov	r3, r2
 8002a88:	eb42 0303 	adc.w	r3, r2, r3
 8002a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a96:	f7fd fbd3 	bl	8000240 <__aeabi_uldivmod>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <UART_SetConfig+0x2d4>)
 8002aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	2164      	movs	r1, #100	@ 0x64
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	3332      	adds	r3, #50	@ 0x32
 8002ab2:	4a08      	ldr	r2, [pc, #32]	@ (8002ad4 <UART_SetConfig+0x2d4>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	f003 0207 	and.w	r2, r3, #7
 8002abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4422      	add	r2, r4
 8002ac6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ac8:	e106      	b.n	8002cd8 <UART_SetConfig+0x4d8>
 8002aca:	bf00      	nop
 8002acc:	40011000 	.word	0x40011000
 8002ad0:	40011400 	.word	0x40011400
 8002ad4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002adc:	2200      	movs	r2, #0
 8002ade:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ae2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ae6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002aea:	4642      	mov	r2, r8
 8002aec:	464b      	mov	r3, r9
 8002aee:	1891      	adds	r1, r2, r2
 8002af0:	6239      	str	r1, [r7, #32]
 8002af2:	415b      	adcs	r3, r3
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002afa:	4641      	mov	r1, r8
 8002afc:	1854      	adds	r4, r2, r1
 8002afe:	4649      	mov	r1, r9
 8002b00:	eb43 0501 	adc.w	r5, r3, r1
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	00eb      	lsls	r3, r5, #3
 8002b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b12:	00e2      	lsls	r2, r4, #3
 8002b14:	4614      	mov	r4, r2
 8002b16:	461d      	mov	r5, r3
 8002b18:	4643      	mov	r3, r8
 8002b1a:	18e3      	adds	r3, r4, r3
 8002b1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b20:	464b      	mov	r3, r9
 8002b22:	eb45 0303 	adc.w	r3, r5, r3
 8002b26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b46:	4629      	mov	r1, r5
 8002b48:	008b      	lsls	r3, r1, #2
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b50:	4621      	mov	r1, r4
 8002b52:	008a      	lsls	r2, r1, #2
 8002b54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b58:	f7fd fb72 	bl	8000240 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4b60      	ldr	r3, [pc, #384]	@ (8002ce4 <UART_SetConfig+0x4e4>)
 8002b62:	fba3 2302 	umull	r2, r3, r3, r2
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	011c      	lsls	r4, r3, #4
 8002b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	464b      	mov	r3, r9
 8002b80:	1891      	adds	r1, r2, r2
 8002b82:	61b9      	str	r1, [r7, #24]
 8002b84:	415b      	adcs	r3, r3
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	1851      	adds	r1, r2, r1
 8002b90:	6139      	str	r1, [r7, #16]
 8002b92:	4649      	mov	r1, r9
 8002b94:	414b      	adcs	r3, r1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba4:	4659      	mov	r1, fp
 8002ba6:	00cb      	lsls	r3, r1, #3
 8002ba8:	4651      	mov	r1, sl
 8002baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bae:	4651      	mov	r1, sl
 8002bb0:	00ca      	lsls	r2, r1, #3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4642      	mov	r2, r8
 8002bba:	189b      	adds	r3, r3, r2
 8002bbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bc0:	464b      	mov	r3, r9
 8002bc2:	460a      	mov	r2, r1
 8002bc4:	eb42 0303 	adc.w	r3, r2, r3
 8002bc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002be4:	4649      	mov	r1, r9
 8002be6:	008b      	lsls	r3, r1, #2
 8002be8:	4641      	mov	r1, r8
 8002bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bee:	4641      	mov	r1, r8
 8002bf0:	008a      	lsls	r2, r1, #2
 8002bf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002bf6:	f7fd fb23 	bl	8000240 <__aeabi_uldivmod>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4b38      	ldr	r3, [pc, #224]	@ (8002ce4 <UART_SetConfig+0x4e4>)
 8002c02:	fba3 2301 	umull	r2, r3, r3, r1
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2264      	movs	r2, #100	@ 0x64
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	1acb      	subs	r3, r1, r3
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	3332      	adds	r3, #50	@ 0x32
 8002c14:	4a33      	ldr	r2, [pc, #204]	@ (8002ce4 <UART_SetConfig+0x4e4>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c20:	441c      	add	r4, r3
 8002c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c26:	2200      	movs	r2, #0
 8002c28:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c30:	4642      	mov	r2, r8
 8002c32:	464b      	mov	r3, r9
 8002c34:	1891      	adds	r1, r2, r2
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	415b      	adcs	r3, r3
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c40:	4641      	mov	r1, r8
 8002c42:	1851      	adds	r1, r2, r1
 8002c44:	6039      	str	r1, [r7, #0]
 8002c46:	4649      	mov	r1, r9
 8002c48:	414b      	adcs	r3, r1
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c58:	4659      	mov	r1, fp
 8002c5a:	00cb      	lsls	r3, r1, #3
 8002c5c:	4651      	mov	r1, sl
 8002c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c62:	4651      	mov	r1, sl
 8002c64:	00ca      	lsls	r2, r1, #3
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	189b      	adds	r3, r3, r2
 8002c70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c72:	464b      	mov	r3, r9
 8002c74:	460a      	mov	r2, r1
 8002c76:	eb42 0303 	adc.w	r3, r2, r3
 8002c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c86:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c94:	4649      	mov	r1, r9
 8002c96:	008b      	lsls	r3, r1, #2
 8002c98:	4641      	mov	r1, r8
 8002c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c9e:	4641      	mov	r1, r8
 8002ca0:	008a      	lsls	r2, r1, #2
 8002ca2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ca6:	f7fd facb 	bl	8000240 <__aeabi_uldivmod>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce4 <UART_SetConfig+0x4e4>)
 8002cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	2164      	movs	r1, #100	@ 0x64
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	3332      	adds	r3, #50	@ 0x32
 8002cc2:	4a08      	ldr	r2, [pc, #32]	@ (8002ce4 <UART_SetConfig+0x4e4>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	f003 020f 	and.w	r2, r3, #15
 8002cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4422      	add	r2, r4
 8002cd6:	609a      	str	r2, [r3, #8]
}
 8002cd8:	bf00      	nop
 8002cda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce4:	51eb851f 	.word	0x51eb851f

08002ce8 <memset>:
 8002ce8:	4402      	add	r2, r0
 8002cea:	4603      	mov	r3, r0
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d100      	bne.n	8002cf2 <memset+0xa>
 8002cf0:	4770      	bx	lr
 8002cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf6:	e7f9      	b.n	8002cec <memset+0x4>

08002cf8 <__libc_init_array>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8002d30 <__libc_init_array+0x38>)
 8002cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8002d34 <__libc_init_array+0x3c>)
 8002cfe:	1b64      	subs	r4, r4, r5
 8002d00:	10a4      	asrs	r4, r4, #2
 8002d02:	2600      	movs	r6, #0
 8002d04:	42a6      	cmp	r6, r4
 8002d06:	d109      	bne.n	8002d1c <__libc_init_array+0x24>
 8002d08:	4d0b      	ldr	r5, [pc, #44]	@ (8002d38 <__libc_init_array+0x40>)
 8002d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8002d3c <__libc_init_array+0x44>)
 8002d0c:	f000 f818 	bl	8002d40 <_init>
 8002d10:	1b64      	subs	r4, r4, r5
 8002d12:	10a4      	asrs	r4, r4, #2
 8002d14:	2600      	movs	r6, #0
 8002d16:	42a6      	cmp	r6, r4
 8002d18:	d105      	bne.n	8002d26 <__libc_init_array+0x2e>
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
 8002d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d20:	4798      	blx	r3
 8002d22:	3601      	adds	r6, #1
 8002d24:	e7ee      	b.n	8002d04 <__libc_init_array+0xc>
 8002d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d2a:	4798      	blx	r3
 8002d2c:	3601      	adds	r6, #1
 8002d2e:	e7f2      	b.n	8002d16 <__libc_init_array+0x1e>
 8002d30:	08002d78 	.word	0x08002d78
 8002d34:	08002d78 	.word	0x08002d78
 8002d38:	08002d78 	.word	0x08002d78
 8002d3c:	08002d7c 	.word	0x08002d7c

08002d40 <_init>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr

08002d4c <_fini>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr
